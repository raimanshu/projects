https://www.youtube.com/watch?v=LMbGZOU-dtA   (Beginer)

https://pythontutor.com/visualize.html#mode=edit

CLASS
-----
Class ClassName:
    def __init__(self, param1, param2):
        self.param1 = param1
        self.param2 = param2
    def method1(self):
        pass
    def method2(self):
        pass

- class is a blueprint/template for creating objects
- class is a user defined data type
- class is a collection of attributes/properties/data members and behaviour/methods



OBJECT 
------
Class ClassName:
    pass
object = ClassName()

- object is an instance of a class
- object is a real world entity
- everything in python is an object
- OBJECT LITERAL - ??
- __init__() is a special method/constructor used to initialize the object of a class
- self is a special variable/keyword used to refer to the current object
- self is a reference(location address) to the current object which is passed as the first argument to the class method
Class ClassName:
    def __init__(self, param1, param2):
        self.param1 = param1
        self.param2 = param2
object = ClassName(param1, param2)

- MAGIC/DUNDER METHODS - special methods/functions used inside a class, they call itself when the object is created
__init__(), __str__(), __repr__(), __del__(), __len__(), __getitem__(), __setitem__(), __delitem__(), __iter__(), __next__(), __add__(), __sub__(), __mul__(), __div__(), __mod__(), __pow__(), __lt__(), __le__(), __eq__(), __ne__(), __gt__(), __ge__(), __and__(), __or__(), __xor__(), __lshift__(), __rshift__(), __invert__(), __neg__(), __pos__(), __abs__(), __round__(), __floor__(), __ceil__(), __trunc__(), __getattr__(), __setattr__(), __delattr__(), __getattribute__(), __setattribute__(), __delattribute__(), __getitem__(), __setitem__(), __delitem__(), __iter__(), __next__(), __reversed__(), __contains__(), __len__(), __getitem__(), __setitem__(), __delitem__(), __iter__(), __next__(), __add__
- __str__() is a special method/function used to return a string representation of the object, print(object) call this method internally
- __add__() is a special method/function used to add two objects, object1 + object2 call this method internally, + operator call this method internally
- __sub__() is a special method/function used to subtract two objects, object1 - object2 call this method internally, - operator call this method internally
- __mul__() is a special method/function used to multiply two objects, object1 * object2 call this method internally, * operator call this method internally
- __truediv__() is a special method/function used to divide two objects, object1 / object2 call this method internally, / operator call this method internally
- __floatdiv__() is a special method/function used to divide two objects, object1 // object2 call this method internally, // operator call this method internally



ABSTRACTION 
-----------
- abstraction is a process of hiding the implementation details from the user, only the functionality will be provided to the user. In other words, the user will have the information on what the object does instead of how it does it.
- ACCESS MODIFIERS - public, private, protected
- PUBLIC - accessible from anywhere
- PRIVATE - accessible only from within the class, __variable_name, __method_name()
- PROTECTED - accessible from within the class and its subclasses
- GETTERS and SETTERS - getters and setters are used to access and modify the private variables of a class
- INSTANCE VARIABLES - variables used to create an object of a class, they are unique to each object
- STATIC/CLASS VARIABLES - variables used inside a class definion, they are shared by all objects of a class
- @staticmethod - decorator used to create a static method, static methods are used to create utility functions



ENCAPSULATION 
-------------
- encapsulation is a process of wrapping code and data together into a single unit, for example, a capsule which is mixed of several medicines.
- encapsulation is used to hide the values or state of a structured data object inside a class, preventing unauthorized parties' direct access to them.
- advatages - 

INHERITANCE 
-----------
- inheritance is a process of creating new classes from existing classes
- advatages of inheritance - code reusability, code maintenance, code readability, code extensibility
- inherits non-private members, non-private methods and constructors of the parent class
- types of inheritance - single, multiple, multilevel, hierarchical, hybrid, multiple inheritance
- single inheritance - a class inherits from a single class
- multiple inheritance - a class inherits from multiple classes
- multilevel inheritance - a class inherits from a class which inherits from another class
- hierarchical inheritance - a class inherits from multiple classes which inherit from the same class
- hybrid inheritance - a class inherits from multiple classes which inherit from different classes


POLYMORPHISM 
------------



DOUBTS 
------
procedural vs functional vs object oriented programming - https://www.youtube.com/watch?v=5-1k1v4gJXg
__str__() vs __repr__() - https://www.geeksforgeeks.org/python-str-vs-repr-functions/
static method vs class method vs instance method vs private method 




class
object 
abstraction 
encapsulation
inheritance
polymorphism

super() class 
access modifiers - public, private, protected, default
getter and setter
static method & static variable 
class method & class variable
instance method & instance
private method & private variable
method resolution order or MRO
binding 
abstract class 
interface class 
concrete class 



overloading 
overriding - method overriding, constructor overriding, operator overriding, variable overriding