React - 
Javascript library to build dynamic and interactive user interfaces
Developed by facebook in 2011
Currently most widely used JS library for frontend development
Used to create Single Page Application (SPA)

DOM -
Browser takes HTML and create DOM
JS helps us to modify DOM based on user actions or events
In big applications, Working with DOM becomes complicated

Problems with Javascript 
React has a smple mental model 
JS is cumbersome
JS is Error-prone
JS is hard to maintain

Working with React 
No need to worry about queryingand updating the DOM elements
React creates a webpage with small and reusable components
React will take care of creating and updating DOM elements 
It saves a lot of time 

JS vs React 
JS is imperative : You define steps to reach your desired state 
React is declarative: You define the target UI state and then figures out how to reach that state 

Introduction to Components 
Components helps us write reusable, modular and better organized code 

What is IDE 
Integrated Development environment 
Software suite that consolidates basic tools required for software development 
Central hub for coding, finding problems and testing 
Designed to improve developer efficiency 

Need of IDE 
Streamlines development 
Increase productivity
Simplifies complex tasks
Offers a unified workspace
IDE features - code auto complete, syntax highlighting, version control, error checking

Create a React App 
Official tool is CRA (creat-react-app)
Vite is a modern tool to create react project
Vite produces a quick and small bundle size
Vite : npm create vite@latest to create app
Vite : Use npm run dev to launch dev server
Use npm start for CRA 

Project Structure 
node_modules/ has all the installed node packages
public/ Firectory : Contains static files that don't change
src/ Directory : Main folder for the react code 
    components/ : Reusable parts of the UI, like buttons or headers
    assets/ : images, fonts and other static files
    styles : CSS and stylesheets
package.json : contains informationabout this project like name, version, dependencies on other react packages
vite.config.js : contains vite config

File Extensions
.js - stands for javascript, contains regular javacript code, used for general logic and components 
.jsx - stands for javascript XML, combines javascript with HTML-like tags, makes it easier to design UI components 

Class Components
Stateful : can manage state 
Lifecycle : access to lifecycle methods
Verbose : More boilerplate code 
Not preferred anymore

Functional Components
initially stateless 
Can use Hooks for state and effects
Simpler and more concise 
More popular

JSX 
Definition : JSX determines how the UI will look whereever the component is used 
Not HTML : Through it resembles HTML, you're actually writing JSX, which stands for javascript XML 
Convention : JSX gets converted to regular javascript 
Babeljs.io/repl : is a tool that allows you to see how JSX is transformed into javascript 

Exporting Components 
Enables the use of a componentin other parts 
Default Export : Allows exporting  a single component as the default from a module 
Named Export : Allows exporting multiple items from a module 
Importing : To use an exported component, you need to import it in the destination file using import syntax 
Syntax 1 :
export default function comp_name(){ return  ... }
Syntax 2 :
 export function comp_name(){ return  ... }
 export function comp_name(){ return  ... }
 Syntax 3 :
  export function comp_name(){ return  ... }
 export default function comp_name(){ return  ... }

 Other important points 
 Naming : Must be capitalized; lowercase for default HTML.
 HTML :  Unlike vanila JS where you can't directly write HTML, in React, you can embed HTML-like syntax using JSX 
 CSS : In React, CSS can be directly imported into component files, allowing for modular and component-specific styling.

 Dynamic Components 
 Dynamic Content : JSX allows the creation of dynamic and interactive UI components.
 Javascript Expressions : Using {}, we can embed any JS expression directly within JSX. This includes variables, function calls and more.
 
Reusable Components
Modularity : Components are modular, allowing for easy reuse across different parts of an application.
Consistency : Reusing components ensures UI consistency and reduces the chances of discrepancies.
Effeciency : Reduces development time and effort by avoiding duplication of code.
Maintainability : Changes made to be reused component reflect everywhere it's used, simplifying updates and bug fixes.

Including Bootstrap
Responsive : Mobile-first design for all device sizes.
Components : Pre-styled elements like buttons and navbars.
Customizable : Modify default styles as needed.
Cross-Brwser : Consistent look across browsers.
Open-Source : Free with community support.
Install : npm i bootstrap@5.3.2
Import : import "bootstrap/dist/css/bootstrap.min.css"

Fragments
- What?
Allows grouping of multiple elements without extra DOM nodes.
- Why?
Return multiple elements without a wrapping parent.
Cleaner DOM and consistent styling.
- How ?
Syntax 1
<React.Fragment>...</React.Fragment>
Syntax 2
<>...</>

Map Method
- Purpose
Render lists from array data
- JSX Elements
Transform array items into JSX
- Inline Rendering
Directly inside JSX
{ items.map(item => <li key={item.id}> {item.name} </li>)
}
- Key Prop
Assign unique key for optimized re-renders
<div key={item.id}> {item.name} </div>

Conditional Rendering
- Displays content based on certain conditions.
Allows for dynamic user interfaces.
- Methods
If-else statements : Choose between two blocks of content.
Ternary operators : Quick way to choose between two options.
Logical operators : useful for rendering content when a condition is true.
- Benefits
Enhances user experience.
Reduces unnecessary rendering.
Makes apps more interactive and responsive.
- Syntax
Syntax 1
{ condition && <div>Write Something</div>}
Syntax 2
{ !condition ? <div> Error do it again </div> : <div>  Congratulations </div> }

Passing Data via Props
- Props in React
Short for properties
Mechanism for passing data.
Read-only by default.
- Usage
Pass data from parent to child component.
Makes components reusable.
Defined as attributes in JSX.
- Key Points
Data flows one-way (downwards).
Props are immutable.
Used for communication between components.
- Example
<Header title="My App" />

CSS Modules
- Localized class names to avoid global conflicts.
- Styles are scoped to individual components.
- Helps in creating component-specific styles.
- Automatically generates unique class names.
- Promotes modular and maintainable CSSS.
- Can use alongside global CSS when needed.
- Example
.meow {color:orange;}  => .cat_meow_j3xk{color:orange;}
- How to use local modular css file
import "./item.modulecss"❌  =>  import styles from "./item.module.css" ✅
className={`${styles["kg-item"]} list-group-item`}

Passing Children
- children is a special prop for passing elements into components.
- Used for flexible and reusable component designs.
- Common in layout or container components.
- Accessed with props.children.
- Can be any content : strings, numbers, JSX or components.
- Enhances component composability and reusability.
- Example
function Container(props) {
return (
<div className="container-style"> {props.children} </div>
);
}
<Container>
<h1> Welcome to My App </h1>
<p> This content is passed as children to the Container Component. </p>
</Container>

Handling Events
- React events use camelCase. eg onClick, etc.
- Uses synthetic events, not direct browser events.
- Event handlers can be functions or  arrow functions.
- Use onChange for controlled form inputs.
- Avoid inline arrow functions in JSX for performance.

Passing Functions via Props
- Pass dynamic behaviour between components.
- Enables upward communication from child to parent.
- Commonly used for event handling.
- Parent defines a function, child invokes it.
- Enhances component interactivity.
- Example
Parent
handleChildClick() {console.log("Child Button Clicked")}
<ChildComponent handleClick=(handleChildClick) />
Child
<button onClick=(props.handleClick)> Child Button <button/>

Managing State
- State represents data that changes over time.
- State is local and private to the component.
- State changes cause the component to re-render.
- For functional components, use the useState hook.
- React Functions that start with word use are called hooks
- Hooks should only be used inside components
- Parent components can pass state down to children via props.
- Lifting state up: share state between components by moving it to their closest common ancestor.

State vs Props
- State:
Local and mutable data within a component.
Initialized within the component.
Can change over time.
Causes re-render when updated.
Managed using useState in functional components.
Props:
Passed into a component from its parent.
Read-only (immutable) within the receiving component.
Allow parent-to-child component communication.
Changes in props can also cause a re-render.

React Icon Library
- You can use a lot of icons without managing
them.
- Install Package
npm install react-icons –save
- Use icon:
import {IconName} from "react-icons/fc";

Inspecting with React Dev Tools
- Inspection: Allows inspection of React component hierarchies.
-  State & Props: View and edit the current state and props of
components.
-  Performance: Analyze component re-renders and performance
bottlenecks.
-  Navigation: Conveniently navigate through the entire component
tree.
-  Filtering: Filter components by name or source to locate them
quickly.
-  Real-time Feedback: See live changes as you modify state or props.

How React Works
Root Component:
• The App is the main or root component of a React application.
• It's the starting point of your React component tree.
Virtual DOM:
• React creates an in-memory structure called the virtual DOM.
• Different from the actual browser DOM.
• It's a lightweight representation where each node stands for a
component and its attributes.
Reconciliation Process:
• When component data changes, React updates the virtual DOM's
state to mirror these changes.
• React then compares the current and previous versions of the
virtual DOM.
• It identifies the specific nodes that need updating.
• Only these nodes are updated in the real browser DOM, making it
efficient.
React and ReactDOM:
• The actual updating of the browser's DOM isn't done by React itself.
• It's handled by a companion library called react-dom.
•Root Element:
• The root div acts as a container for the React app.
• The script tag is where the React app starts executing.
• If you check main.tsx, the component tree is rendered inside this
root element.
•Strict Mode Component:
• It's a special component in React.
• Doesn't have a visual representation.
• Its purpose is to spot potential issues in your React app.
•Platform Independence:
• React's design allows it to be platform-agnostic.
• While react-dom helps build web UIs using React, ReactNative can
be used to craft mobile app UIs.
- index.html -> main.jsx
- React.StrictMode to follow react rules strictly

React vs Angular vs Vue
React, Angular, and Vue:
• React is a library, while Angular and Vue.js are frameworks.
• React focuses on UI; Angular and Vue.js offer comprehensive
tools for full app development.
•Library vs. Framework:
• A library offers specific functionality.
• A framework provides a set of tools and guidelines.
• In simpler terms: React is a tool; Angular and Vue.js are toolsets.
•React's Specialty:
• React's main role is crafting dynamic, interactive UIs.
• It doesn't handle routing, HTTP calls, state management, and
more.
•React's Flexibility:
• React doesn't dictate tool choices for other app aspects.
• Developers pick what fits their project best.
•About Angular and Vue.js:
• Angular, developed by Google, provides a robust framework with
a steep learning curve.
• Vue.js is known for its simplicity and ease of integration, making
it beginner-friendly.

Using Forms
1. State Management: Each input's state
is stored in the component's state.
2. Handling Changes: Use onChange to
detect input changes.
3. Submission: Utilize onSubmit for form
submissions and prevent default with
event.preventDefault().
4. Validation: Implement custom
validation or use third-party libraries.

Use Ref
1. useRef allows access to DOM elements and
retains mutable values without re-renders.
2. Used with the ref attribute for direct DOM
interactions.
3. Can hold previous state or prop values.
4. Not limited to DOM references; can hold any
value.
5. Refs can be passed as props also

Update state from Previous State
• Spread Operator: Use to maintain
immutability when updating arrays or
objects.
• Functional Updates: Use
(existingPosts) => [postData, ...existingPosts]
to avoid stale values during asynchronous
updates.
- Example 
setTodoItems((currValue) => [...currValue, newData])

Context API
1. Prop Drilling: Context API addresses prop drilling;
component composition is an alternative.
2. Folder Setup: Use a store folder for context files.
3. Initialization: Use React.createContext with initial state
and export it.
4. Provider: Implement with contextName.Provider in
components.
5. Access Value: Use the useContext hook.
6. Dynamic Data: Combine context value with state.
7. Export Functions: Context can also export functions for
actions
8. Logic Separation: This helps keep the UI and business
logic separate from each other.
First class objects  

Use Reducer
1. useReducer is a hook in React that offers more control over
state operations compared to useState, especially for
complex state logic.
2. Components: It involves two main components:
• Reducer: A pure function that takes the current state and
an action and returns a new state.
• Action: An object describing what happened, typically
having a type property.
3. Initialization: It's invoked as
const [state, dispatch] = useReducer(reducer, initialState).
4. Dispatch: Actions are dispatched using the dispatch
function, which invokes the reducer with the current state
and the given action.
5. Use Cases: Particularly useful for managing state in large
components or when the next state depends on the
previous one.
6. Predictable State Management: Due to its strict structure, it
leads to more predictable and maintainable state
management.

Introducing Dummy API
Get dummy/fake json to use as a placeholder in development or in prototype testing

Data fetching using Fetch
1. fetch: Modern JavaScript API for network requests.
2. Promise-Based: Returns a Promise with a Response
object.
3. Usage: Default is GET. For POST use method: 'POST'
4. Response: Use .then() and response.json() for JSON data.
5. Errors: Doesn't reject on HTTP errors. Check response.ok.
6. Headers: Managed using the Headers API.


The useEffect Hook
1. In function-based components, useEffect handles
side effects like data fetching or event listeners.
2. useEffect runs automatically after every render by
default.
3. By providing a dependency array, useEffect will only
run when specified variables change. An empty array
means the effect runs once.
4. Multiple useEffect hooks can be used in a single
component for organizing different side effects
separately.

Handling Loading State

The useEffect Hook Cleanup
Returning a function from `useEffect` allows for
cleanup, ideal for removing event listeners.
- Example
useEffect(() => {
const timerID = setInterval(()=> {
// do something
}, 1000)
}, []);
// This is the cleanup function
return () => {
clearInterval(timerID);
}

Advanced useEffect
useEffect(() => {
const controller = new AbortController();
const signal = controller.singal;
fetch(`/api/users/${id}`, {signal})
.then((res) => res.json())
.then((data) => {
setUser(data);
});
return ()=> {
controller.abort();
}
}, [id]);

The useCallback Hook
1. Memoization: Preserves function across
renders to prevent unnecessary re-renders.
2. Optimization: Enhances performance in
components with frequent updates.
3. Dependency Array: Recreates the function
only when specific dependencies change.
4. Event Handlers: Used to keep consistent
function references for child components.
5. With useEffect: Prevents infinite loops by
maintaining function references.

The useMemo Hook
1. Memoization: useMemo caches the result of
expensive calculations to enhance performance.
2. Re-computation: Only re-computes the memoized
value when specific dependencies change.
3. Optimization: Helps prevent unnecessary
recalculations, improving component rendering
efficiency.
4. Dependency Array: Uses an array of
dependencies to determine when to recompute
the cached value.
5. Comparison with useCallback: While useCallback
memoizes functions, useMemo memoizes values
or results of functions.
6. Best Use: Ideal for intensive computations or
operations that shouldn't run on every render.

Custom Hooks
1. Reusable Logic: Custom hooks allow you to
extract and reuse component logic across multiple
components.
2. Naming Convention: Typically start with "use"
(e.g., useWindowSize, useFetch).
3. Combining Hooks: Custom hooks can combine
multiple built-in hooks like useState, useEffect,
and others.
4. Sharing State: Enables sharing of stateful logic
without changing component hierarchy.
5. Isolation: Helps in isolating complex logic, making
components cleaner and easier to maintain.
6. Custom Return Values: Can return any value
(arrays, objects, or any other data type) based on
requirements.
- Example
const [value, toggle] = useToggle();
const [value, {on, off, toggle}] = useBoolean(true);

Submitting data with Fetch

React Router
1. Installation: Use npm install react-router-dom.
2. We are going to use the latest version which is 6+
3. RouterProvider: Wraps the app for routing capabilities.
4. createBrowserRouter: helps creating the mapping for router provider.
5. Declarative Routing: Easily define application routes.
6. Routes are React components.

Layout Routes
1. Layout Routes help us to use shared elements
2. Outlet component is used to render the children at the correct places

Route Links
1. Link Component with to property can be used to avoid reloading
2. useNavigate hook can be used to do navigation programmatically.
- Use <Link /> tag instead of <a /> tag
- use Href instead href attribute in  <a /> tag

Data fetching using loader
1. Loader method can be used to load
data before a particular route is
executed.
2. The loader method must return the
data that is loaded or promise.
3. Data is available in component and all
the child components.
4. useLoaderData hook can be used to
get the fetched data.
5. Loading state can also be used.

Submitting Data using action
1. Action method can be used to perform an
action on submission of Forms.
2. Custom Form component need to be used
along with name attribute for all inputs.
3. Action function will get an data object. To
generate correct request object
method=“post” attribute should be used.
4. Data.request.formData() method can be
used to get form data Object.
5. Object.fromEntries(formData) can be used
to get actual input data.
6. redirect() response can be returned for
navigation after submission.

What is Redux
1. State management for cross component or app-wide state.
2. Redux is a predictable state management library for JavaScript apps.
3. Local State vs Cross-component state vs App-Wide state
4. useState or useReducer vs useState with prop drilling vs useState or
useContext or Redux

React Context vs Redux
1. You can use both.
2. Setup and Coding is tough especially if you have multiple context
providers.
3. Performance is slow. Context should only be used for things that rarely
change. On the other hand Redux has great performance.
4. If these things don’t matter to you then you can choose not to use redux
and stay with React-Context.

How redux works
1. Single Source: Uses a single central store to
maintain the entire application's state.
2. Actions: Components never directly change the
store. Changes to state are made through
dispatched actions, which describe events.
3. Reducers: Actions are processed by reducers,
pure functions that return the new state.
4. Immutable: State is immutable; every change
results in a new state object.
5. This is different from useReducer hook.

Working with Redux
1. npm init –y
2. npm install redux
3. import in node Const redux = require(‘redux’);
4. We need to setup all 4 basic things:
1. Reducer
2. Store
3. Subscriber
4. Actions
5. Node redux-demo.js command to run node server

React with Redux
1. Npm install redux
2. Npm install react-redux
3. Create store folder with Index.js file
4. Creating the store using
Import {createStore} from redux.
5. Providing the store with react
1. Provider from react-redux
2. <Provider store={store}><App /></Provider>
6. Using the store
1. useSelector hook gets a slice of the store.
Const counter = useSelector(state => state.counter);
2. Subscription is already setup and only will re-execute
when only your slice is changed. Subscription is
automatically cleared also.
7. Dispatch Actions using the useDispatch hook.

Why Redux ToolKit
1. Action types are difficult to maintain
2. Store becoming too big
3. Mistakenly editing store
4. Reducer becoming too big

Working with Redux ToolKit
1. Npm install @reduxjs/toolkit
2. Remove redux from package.json
3. Import {createSlice} from “@reduxjs/toolkit”
4. Slices of the store can be created using the following syntax:
Const slice = createSlice({
name: ‘’,
initialState: {},
reducers: {
smallReducerMethods: (state, action) => {
},
}
})
5. ConfigureStore combines multiple reducers and can be used as:
configureStore({
reducer: {name: slice.reducer}
})
6. Export actions = slice.actions;
7. Actions can be dispatched like: actions.reducerMethod(payload);

DOUBTS
------
Single Page Application (SPA)
Document Object Model (DOM)
JS vs React
Vite 
npm vs npx vs vite
Hot Reloading
React Folder Structure Details
dependencies vs devDepencies in package.json 
class components vs fuctional components 
js vs jsx 
Babel 
js variable vs state
useRef vs normal ref

Change state value rerenders UI then why to use useEffect ?
state vs props
normal props vs children prop
virtual DOM vs Browser DOM
React synthetic event vs native event
If react first updates the virtual DOM then real DOM then it should be slow ?
useState vs useRef functionality ?
prop drilling
useContext vs useReducer functionality ?
why use .then() two times while using Promise() ?
useCallback() vs useMemo()
custom Hooks
RouterProvider, CreateBrowserRouter,
Normal routes vs Layout Routes
loader and useLoaderData() method in routing
context api vs reducer functionality
Redux vs useReducer
Why use {} or componentName directly in react import ?
How to stop doubble console of state in react ?



OBSERVATIONS
------------
https://getbootstrap.com/docs/5.0/examples/
By default React search static things like images and others in public folder.