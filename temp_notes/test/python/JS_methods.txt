| Type        | Description                          | Example                      |
| ----------- | ------------------------------------ | ---------------------------- |
| `string`    | Text                                 | `"Hello"`                    |
| `number`    | Integer or float                     | `42`, `3.14`                 |
| `boolean`   | True or false                        | `true`, `false`              |
| `undefined` | A variable declared but not assigned | `let x;` ‚Üí `x === undefined` |
| `null`      | Intentional absence of value         | `let y = null`               |
| `bigint`    | Very large integers                  | `12345678901234567890n`      |
| `symbol`    | Unique identifiers                   | `Symbol('id')`               |


| Type       | Description                            | Example                     |
| ---------- | -------------------------------------- | --------------------------- |
| `object`   | Key-value pairs                        | `{ name: "John", age: 30 }` |
| `array`    | Indexed collection of values           | `[1, 2, 3]`                 |
| `function` | Reusable block of code                 | `function greet() { ... }`  |
| `date`     | Date and time values (via constructor) | `new Date()`                |
| `regex`    | Regular expressions                    | `/ab+c/`                    |


STRINGS 
-------
// üì¶ Create a string
let text = "Hello, JavaScript!";
let spaced = "   padded string   ";
let emoji = "üòÄüòÉüòÑ";

// ‚ñ∂Ô∏è Length
console.log(text.length);                        // 18

// ‚ñ∂Ô∏è Access & Indexing
console.log(text[0]);                            // 'H'
console.log(text.at(-1));                        // '!' (last char, ES2022+)

// ‚ñ∂Ô∏è Slicing / Substring
console.log(text.slice(0, 5));                   // 'Hello'
console.log(text.slice(7));                      // 'JavaScript!'
console.log(text.slice(-6));                     // 'cript!'
console.log(text.substring(0, 5));               // 'Hello'
console.log(text.substr(7, 4));                  // 'Java' (deprecated)

// ‚ñ∂Ô∏è Case Transform
console.log(text.toUpperCase());                 // 'HELLO, JAVASCRIPT!'
console.log(text.toLowerCase());                 // 'hello, javascript!'

// ‚ñ∂Ô∏è Check / Search
console.log(text.includes("Java"));              // true
console.log(text.startsWith("Hell"));            // true
console.log(text.endsWith("!"));                 // true
console.log(text.indexOf("a"));                   // 1 (first 'a' found at index 1)
console.log(text.lastIndexOf("a"));               // 11 (last 'a' found at index 11)

// ‚ñ∂Ô∏è Replace / Modify
console.log(text.replace("JavaScript", "World"));   // 'Hello, World!'
console.log(text.replaceAll("a", "@"));             // 'Hello, J@v@Script!'

// ‚ñ∂Ô∏è Regex Match & Replace
console.log(text.match(/Java\w+/));              // ['JavaScript']
console.log([...text.matchAll(/[A-Z]/g)]);       // Array of matches for uppercase letters: [{index: 0, input: ...}, {index: 7, ...}]
console.log(text.search(/Script/));               // 10 (position where 'Script' begins)
console.log(text.replace(/a/g, '*'));             // Replace all 'a's with '*': 'Hello, J*v*Script!'

// ‚ñ∂Ô∏è Padding
console.log(text.padStart(20, '*'));              // '***Hello, JavaScript!'
console.log(text.padEnd(20, '-'));                 // 'Hello, JavaScript!---'

// ‚ñ∂Ô∏è Trimming
console.log(spaced.trim());                        // 'padded string'
console.log(spaced.trimStart());                   // 'padded string   ' (leading spaces removed)
console.log(spaced.trimEnd());                     // '   padded string' (trailing spaces removed)

// ‚ñ∂Ô∏è Split & Join
let parts = text.split(", ");                      // ['Hello', 'JavaScript!']
console.log(parts.join(" - "));                    // 'Hello - JavaScript!'

// ‚ñ∂Ô∏è Char Access
console.log(text.charAt(1));                       // 'e'
console.log(text.charCodeAt(1));                   // 101 (UTF-16 code unit)
console.log(text.codePointAt(1));                  // 101 (full Unicode code point)

// ‚ñ∂Ô∏è Unicode Handling
console.log([...emoji]);                            // ['üòÄ', 'üòÉ', 'üòÑ']
console.log(emoji.normalize());                     // Unicode NFC normalized form (returns same string here)

// ‚ñ∂Ô∏è Repeat & Concat
console.log("Hi".repeat(3));                        // 'HiHiHi'
console.log("Hello".concat(", ", "World"));         // 'Hello, World'

// ‚ñ∂Ô∏è Comparison
console.log("abc".localeCompare("abd"));            // -1 (abc < abd)

// ‚ñ∂Ô∏è Iteration
for (let char of text) console.log(char);          // prints each character on its own line

// ‚ñ∂Ô∏è Template Literals
let name = "Alice";
console.log(`Hello, ${name}!`);                      // 'Hello, Alice!'

// ‚ñ∂Ô∏è Raw Strings
console.log(String.raw`Line1\nLine2`);               // 'Line1\\nLine2' (raw string, backslash not escaped)

// ‚ñ∂Ô∏è Type Conversion
console.log(text.valueOf());                         // 'Hello, JavaScript!'
console.log(text.toString());                        // 'Hello, JavaScript!'

// ‚ñ∂Ô∏è Prototype Inherited
console.log(text.__proto__.includes === String.prototype.includes); // true

// ‚ñ∂Ô∏è Access Prototype & All Methods
console.log(Object.getOwnPropertyNames(String.prototype));          // lists all String prototype methods


NUMBERS
-------
// üì¶ Create numbers
let a = 42;
let b = 3.1415;
let c = -10;
let d = 0b1010;            // Binary: 10
let e = 0o755;             // Octal: 493
let f = 0xFF;              // Hex: 255
let g = Number("123");     // 123
let h = new Number(5);     // Object wrapper (avoid!)


// ‚ñ∂Ô∏è Type Check & Safety
console.log(typeof a);                          // 'number'
console.log(Number.isFinite(a));                // true
console.log(Number.isInteger(b));               // false
console.log(Number.isNaN(NaN));                  // true
console.log(Number.isSafeInteger(9007199254740991)); // true

// ‚ñ∂Ô∏è Special Values
console.log(1 / 0);                             // Infinity
console.log(-1 / 0);                            // -Infinity
console.log(0 / 0);                             // NaN

// ‚ñ∂Ô∏è Constants
console.log(Number.MAX_VALUE);                   // 1.7976931348623157e+308
console.log(Number.MIN_VALUE);                   // 5e-324
console.log(Number.MAX_SAFE_INTEGER);            // 9007199254740991
console.log(Number.MIN_SAFE_INTEGER);            // -9007199254740991
console.log(Number.POSITIVE_INFINITY);           // Infinity
console.log(Number.NEGATIVE_INFINITY);           // -Infinity
console.log(Number.NaN);                         // NaN

// ‚ñ∂Ô∏è Conversion
console.log(Number("123"));                      // 123
console.log(parseInt("42px"));                   // 42
console.log(parseFloat("3.14abc"));              // 3.14
console.log(+"100");                             // 100 (unary + coercion)
console.log((123.456).toFixed(1));               // '123.5'
console.log((123.456).toPrecision(4));           // '123.5'

// ‚ñ∂Ô∏è Formatting
console.log((255).toString());                   // '255'
console.log((255).toString(2));                  // '11111111' (binary)
console.log((255).toString(16));                 // 'ff' (hex)
console.log((1000).toLocaleString());            // '1,000' (based on locale)
console.log((9.9).toExponential(1));             // '9.9e+0'

// ‚ñ∂Ô∏è Math Operations
console.log(Math.abs(-7));                       // 7
console.log(Math.ceil(4.2));                     // 5
console.log(Math.floor(4.7));                    // 4
console.log(Math.round(4.5));                    // 5
console.log(Math.trunc(4.9));                    // 4
console.log(Math.max(1, 5, 3));                  // 5
console.log(Math.min(1, 5, 3));                  // 1
console.log(Math.pow(2, 3));                     // 8
console.log(2 ** 3);                             // 8 (ES6 exponentiation)
console.log(Math.sqrt(16));                      // 4
console.log(Math.cbrt(27));                      // 3

// ‚ñ∂Ô∏è Math Constants
console.log(Math.PI);                            // 3.141592653589793
console.log(Math.E);                             // 2.718281828459045
console.log(Math.LN2);                           // 0.6931471805599453

// ‚ñ∂Ô∏è Random & Rounding
console.log(Math.random());                      // 0.0 <= x < 1.0
console.log(Math.floor(Math.random() * 10));    // 0‚Äì9

// ‚ñ∂Ô∏è Sign & Clamping
console.log(Math.sign(-50));                     // -1
console.log(Math.sign(0));                       // 0
console.log(Math.sign(50));                      // 1

// Math.clamp is not built-in ‚Äî add a polyfill:
Math.clamp = Math.clamp || function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
console.log(Math.clamp(5, 1, 10));               // 5
console.log(Math.clamp(-1, 1, 10));              // 1
console.log(Math.clamp(15, 1, 10));              // 10

// ‚ñ∂Ô∏è BigInt (for large integers)
let big = 1234567890123456789012345678901234567890n;
console.log(typeof big);                          // 'bigint'
console.log(big + 10n);                           // 1234567890123456789012345678901234567900n

// ‚ñ∂Ô∏è Edge Cases
console.log(0.1 + 0.2);                           // 0.30000000000000004
console.log((0.1 + 0.2).toFixed(2));              // '0.30'

// ‚ñ∂Ô∏è Prototype Methods (Object-style)
let numObj = new Number(123.456);
console.log(numObj.valueOf());                     // 123.456
console.log(numObj.toString());                    // '123.456'
console.log(numObj.constructor === Number);       // true

// ‚ñ∂Ô∏è Inspect All Methods
console.log(Object.getOwnPropertyNames(Number.prototype));
console.log(Object.getOwnPropertyNames(Number)); // Static methods on Number object



BOOLEANS
--------
// üì¶ Create Booleans
let a = true;
let b = false;
let c = Boolean(1);               // true
let d = Boolean(0);               // false
let e = new Boolean(false);       // ‚ö†Ô∏è truthy object, not primitive

// ‚ñ∂Ô∏è Type Check
console.log(typeof a);            // 'boolean'
console.log(typeof e);            // 'object' (wrapper object)
console.log(e instanceof Boolean); // true

// ‚ñ∂Ô∏è Coercion (Truthy / Falsy)
console.log(Boolean(""));         // false
console.log(Boolean("hello"));    // true
console.log(Boolean(0));          // false
console.log(Boolean(123));        // true
console.log(Boolean(null));       // false
console.log(Boolean(undefined));  // false
console.log(Boolean(NaN));        // false
console.log(Boolean([]));         // true (empty array is truthy)
console.log(Boolean({}));         // true (empty object is truthy)

// ‚ñ∂Ô∏è Truthy Values
let truthyExamples = [1, -1, "0", "false", [], {}, Infinity];
truthyExamples.forEach(val => console.log(Boolean(val)));  // all true

// ‚ñ∂Ô∏è Falsy Values
let falsyExamples = [0, "", null, undefined, NaN, false];
falsyExamples.forEach(val => console.log(Boolean(val)));   // all false

// ‚ñ∂Ô∏è Logical Operators
console.log(true && false);       // false
console.log(true || false);       // true
console.log(!true);               // false

// ‚ñ∂Ô∏è Short-circuit Evaluation
console.log("Hello" && 123);      // 123 (returns second value if first truthy)
console.log(0 || "fallback");     // 'fallback' (returns first truthy or last falsy)
console.log("" || 0 || "yes");    // 'yes' (first truthy value)

// ‚ñ∂Ô∏è Boolean Object Wrapper (‚ö†Ô∏è Avoid)
let wrapped = new Boolean(false);
console.log(wrapped == true);     // false (because wrapped is object, not coerced to primitive automatically)
console.log(wrapped === true);    // false (strict comparison)
console.log(wrapped.valueOf());   // false (primitive boolean value)
console.log(Boolean(wrapped));    // true (objects are always truthy)

// ‚ñ∂Ô∏è Boolean Conversion via !!
console.log(!!"text");            // true
console.log(!!null);              // false

// ‚ñ∂Ô∏è Boolean to String / Number
console.log(true.toString());     // 'true'
console.log(false.toString());    // 'false'
console.log(Number(true));        // 1
console.log(Number(false));       // 0

// ‚ñ∂Ô∏è Boolean Object Methods
let boolObj = new Boolean(true);
console.log(boolObj.valueOf());   // true (primitive boolean)
console.log(boolObj.toString());  // 'true'

// ‚ñ∂Ô∏è Inspect All Boolean Prototype Methods
console.log(Object.getOwnPropertyNames(Boolean.prototype)); 
// ['constructor', 'toString', 'valueOf']


SYMBOLS
-------
// üì¶ Create Symbols
const sym1 = Symbol();                  // unique
const sym2 = Symbol("desc");            // with description
const sym3 = Symbol("desc");
console.log(sym2 === sym3);            // false (always unique)

// ‚ñ∂Ô∏è Description
console.log(sym2.description);         // 'desc'

// ‚ñ∂Ô∏è Use as Object Keys (invisible to normal iteration)
const user = {
  name: "Alice",
  [sym1]: 12345
};
console.log(user[sym1]);               // 12345

// ‚ñ∂Ô∏è Symbols are not enumerable
console.log(Object.keys(user));        // ['name']
console.log(Object.getOwnPropertySymbols(user)); // [Symbol()]

// ‚ñ∂Ô∏è Combine with Object.defineProperty
const hiddenKey = Symbol("secret");
Object.defineProperty(user, hiddenKey, {
  value: "hiddenValue",
  enumerable: false
});
console.log(user[hiddenKey]);          // 'hiddenValue'

// ‚ñ∂Ô∏è Global Symbol Registry
const symA = Symbol.for("shared");
const symB = Symbol.for("shared");
console.log(symA === symB);            // true

// ‚ñ∂Ô∏è Retrieve key from global symbol
console.log(Symbol.keyFor(symA));      // 'shared'
console.log(Symbol.keyFor(sym2));      // undefined (not in registry)

// ‚ñ∂Ô∏è Coercion & Conversion
console.log(sym1.toString());          // 'Symbol()'
console.log(sym2.valueOf());           // Symbol('desc')
console.log(typeof sym1);              // 'symbol'

// ‚ñ∂Ô∏è Use in classes as private properties
const privateProp = Symbol("private");

class Counter {
  constructor() {
    this[privateProp] = 0;
  }

  increment() {
    this[privateProp]++;
  }

  get value() {
    return this[privateProp];
  }
}

const c = new Counter();
c.increment();
console.log(c.value);                  // 1

// ‚ñ∂Ô∏è Inspect All Symbol Properties on Object
console.log(Object.getOwnPropertySymbols(c));   // [Symbol(private)]

// ‚ñ∂Ô∏è Symbol Prototype Methods
console.log(Object.getOwnPropertyNames(Symbol.prototype));  
// ['constructor', 'toString', 'valueOf']

// ‚ñ∂Ô∏è Well-known Built-in Symbols (for customizing behavior)
const obj = {
  [Symbol.toStringTag]: "CustomObject"
};

console.log(obj.toString());           // '[object CustomObject]'

// ‚ñ∂Ô∏è Using Symbol.iterator to make an object iterable
const range = {
  from: 1,
  to: 3,
  [Symbol.iterator]() {
    let current = this.from, end = this.to;
    return {
      next() {
        return current <= end ? { value: current++, done: false } : { done: true };
      }
    };
  }
};

for (let num of range) console.log(num); // 1, 2, 3

// ‚ñ∂Ô∏è Additional well-known Symbols examples:

// Symbol.hasInstance: customize instanceof behavior
class MyClass {
  static [Symbol.hasInstance](instance) {
    return instance.customCheck === true;
  }
}
const instance = { customCheck: true };
console.log(instance instanceof MyClass);  // true

// Symbol.toPrimitive: customize object-to-primitive conversion
const obj2 = {
  [Symbol.toPrimitive](hint) {
    if (hint === "number") return 42;
    if (hint === "string") return "forty-two";
    return true;
  }
};
console.log(+obj2);      // 42 (number hint)
console.log(`${obj2}`);  // "forty-two" (string hint)
console.log(obj2 + "");  // "true" (default hint)

// Symbol.isConcatSpreadable: control array spread in concat
const arr = [1, 2];
arr[Symbol.isConcatSpreadable] = false;
const result = [3].concat(arr);
console.log(result);    // [ [1, 2] ] instead of [3, 1, 2]

// ‚ñ∂Ô∏è Retrieve all well-known symbols supported by the environment
console.log(Object.getOwnPropertySymbols(Symbol)); 
// This is usually empty because well-known symbols are properties on Symbol, not symbol-valued.
// Instead, access via Symbol.* like Symbol.iterator, Symbol.toStringTag, etc.
console.log([
  Symbol.hasInstance,
  Symbol.isConcatSpreadable,
  Symbol.iterator,
  Symbol.match,
  Symbol.replace,
  Symbol.search,
  Symbol.species,
  Symbol.split,
  Symbol.toPrimitive,
  Symbol.toStringTag,
  Symbol.unscopables
]);



OBJECTS
-------
// üì¶ Create Objects
let obj1 = {};                                // Empty object
let obj2 = { name: "Alice", age: 30 };        // With properties
let obj3 = new Object({ role: "admin" });     // Constructor form

// ‚ñ∂Ô∏è Property Access
console.log(obj2.name);                       // 'Alice'
console.log(obj2["age"]);                     // 30
obj2.country = "India";                       // Add property
delete obj2.age;                              // Remove property
console.log("age" in obj2);                   // false

// ‚ñ∂Ô∏è Optional Chaining (safe property access)
let person = { address: { city: "NYC" } };
console.log(person.address?.city);            // 'NYC'
console.log(person.phone?.number);            // undefined

// ‚ñ∂Ô∏è Destructuring
let { name, country } = obj2;
console.log(name);                            // 'Alice'

// ‚ñ∂Ô∏è Looping Properties
for (let key in obj2) {
  console.log(key, obj2[key]);                // Only enumerable keys, including inherited ones
}
console.log(Object.keys(obj2));               // ['name', 'country'] (own enumerable keys)
console.log(Object.values(obj2));             // ['Alice', 'India']
console.log(Object.entries(obj2));            // [['name', 'Alice'], ['country', 'India']]

// ‚ñ∂Ô∏è Object Cloning & Merging
let copy = { ...obj2 };                       // Shallow clone via spread syntax
let merged = Object.assign({}, obj2, { age: 25 }); // Merge objects (rightmost overwrites)
console.log(merged);                          // { name: ..., country: ..., age: 25 }

// ‚ñ∂Ô∏è Equality (Objects are reference types)
let a = { x: 1 };
let b = { x: 1 };
console.log(a === b);                         // false (different references)
console.log(JSON.stringify(a) === JSON.stringify(b)); // true (deep equality by serialization)

// ‚ñ∂Ô∏è Freeze / Seal / Prevent Extensions
let frozen = Object.freeze({ foo: 1 });       // Immutable object: no add/delete/change props
frozen.foo = 2;                               // ‚ùå No change (fails silently or throws in strict mode)

let sealed = Object.seal({ a: 1 });           // Prevent add/delete but allow changes to existing props
sealed.a = 2;                                 // ‚úÖ can update
delete sealed.a;                              // ‚ùå can't delete

let blocked = Object.preventExtensions({ x: 1 }); // Prevent adding new props, but allow changing/deleting
blocked.y = 2;                                // ‚ùå can't add new prop

// ‚ñ∂Ô∏è Property Descriptors (control property behavior)
let user = { name: "Bob" };
Object.defineProperty(user, "id", {
  value: 101,
  writable: false,      // Cannot be changed
  enumerable: false,    // Hidden from for..in and Object.keys
  configurable: false   // Cannot delete or redefine descriptor
});
console.log(Object.getOwnPropertyDescriptor(user, "id")); 
// { value: 101, writable: false, enumerable: false, configurable: false }
console.log(Object.getOwnPropertyNames(user));  // includes non-enumerable keys ['name', 'id']

// ‚ñ∂Ô∏è Inheritance & Prototypes
let parent = { greet() { console.log("Hello"); } };
let child = Object.create(parent);
child.name = "Tom";
child.greet();                                // Inherited method: 'Hello'
console.log(child.__proto__ === parent);      // true (prototype link)

// ‚ñ∂Ô∏è Check if property is own vs inherited
console.log(child.hasOwnProperty("name"));    // true (own property)
console.log(child.hasOwnProperty("greet"));   // false (inherited)

// ‚ñ∂Ô∏è Object.create() (create with prototype)
let base = {
  sayHi() { console.log("Hi"); }
};
let obj4 = Object.create(base);
obj4.sayHi();                                 // 'Hi'

// ‚ñ∂Ô∏è Object Constructor Methods (static methods)
console.log(Object.keys(obj2));               // ['name', 'country'] (own enumerable keys)
console.log(Object.values(obj2));             // ['Alice', 'India']
console.log(Object.entries(obj2));            // [['name', 'Alice'], ['country', 'India']]
console.log(Object.fromEntries([["a", 1], ["b", 2]]));  // Build object from key-value pairs: { a: 1, b: 2 }

// ‚ñ∂Ô∏è Prototype Chain Utilities
console.log(Object.getPrototypeOf(obj4));     // base object (prototype)
Object.setPrototypeOf(obj2, base);             // change prototype chain
obj2.sayHi();                                 // now works because of prototype change

// ‚ñ∂Ô∏è Built-in Static Methods

// Object.is(): compares values like === but treats NaN === NaN and +0 !== -0
console.log(Object.is(0, -0));                // false
console.log(Object.is(NaN, NaN));             // true

// Object.assign(): merges source objects into target (shallow copy)
console.log(Object.assign({}, { x: 1 }, { y: 2 })); // { x: 1, y: 2 }

// Object.hasOwn(): checks own property (ES2022+)
console.log(Object.hasOwn(obj2, "name"));     // true

// ‚ñ∂Ô∏è Useful Inherited Methods (via Object.prototype)
let obj = { x: 10 };
console.log(obj.toString());                  // '[object Object]' (default string representation)
console.log(obj.valueOf());                   // Returns the object itself (used for primitive conversion)
console.log(obj.hasOwnProperty("x"));         // true (own property check)
console.log(obj.propertyIsEnumerable("x"));   // true (property is enumerable)
console.log(obj.isPrototypeOf(child));        // false (obj is not in child's prototype chain)
console.log(Object.prototype.isPrototypeOf(child)); // true (Object.prototype is ancestor)

// ‚ñ∂Ô∏è Inspect Prototype Methods on Object.prototype
console.log(Object.getOwnPropertyNames(Object.prototype));
/*
[
  'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
  'toLocaleString', 'toString', 'valueOf', '__defineGetter__',
  '__defineSetter__', '__lookupGetter__', '__lookupSetter__', '__proto__'
]
*/

// ‚ñ∂Ô∏è Additional Useful Object.prototype Methods

// __defineGetter__ / __defineSetter__: define getter/setter (non-standard but widely supported)
obj.__defineGetter__("foo", function() { return 42; });
console.log(obj.foo); // 42

obj.__defineSetter__("foo", function(val) { console.log("Setting foo to", val); });
obj.foo = 10; // logs: Setting foo to 10

// __lookupGetter__ / __lookupSetter__: get getter/setter function of property (if defined)
console.log(obj.__lookupGetter__("foo")); // function() { return 42; }
console.log(obj.__lookupSetter__("foo")); // function(val) { ... }

// __proto__: get/set prototype object (deprecated in favor of Object.getPrototypeOf/setPrototypeOf)
console.log(obj.__proto__ === Object.prototype);  // true
obj.__proto__ = base;     // sets prototype (not recommended)

// ‚ñ∂Ô∏è Object Property Enumeration Types
// for..in loops all enumerable properties (own + inherited)
// Object.keys() returns own enumerable keys only
// Object.getOwnPropertyNames() returns all own properties (enumerable + non-enumerable)
// Object.getOwnPropertySymbols() returns own symbol properties

// ‚ñ∂Ô∏è Summary of common Object methods:

/*
Object.create(proto, [descriptors])  - creates new object with specified prototype and property descriptors
Object.assign(target, ...sources)    - shallow copies enumerable own properties from sources to target
Object.freeze(obj)                   - prevents any modification (add/delete/update)
Object.seal(obj)                    - prevents adding/deleting props but allows updating existing
Object.preventExtensions(obj)       - prevents adding new properties
Object.keys(obj)                    - returns own enumerable property names
Object.values(obj)                  - returns own enumerable property values
Object.entries(obj)                 - returns own enumerable [key, value] pairs
Object.fromEntries(iterable)        - creates object from iterable of [key, value]
Object.getPrototypeOf(obj)          - returns prototype of obj
Object.setPrototypeOf(obj, proto)   - sets prototype of obj (avoid performance penalty)
Object.getOwnPropertyDescriptor(obj, prop) - get property descriptor
Object.getOwnPropertyNames(obj)     - get all own property names (including non-enumerable)
Object.getOwnPropertySymbols(obj)   - get own symbol properties
Object.is(value1, value2)            - compares values (like === but NaN === NaN, +0 !== -0)
Object.hasOwn(obj, prop)             - ES2022+ own property check
*/

// You got all the main missing methods + what they do! Need examples or details on any specific?



ARRAYS
------
// üì¶ Create Arrays
let fruits = ["apple", "banana", "cherry"];
let numbers = new Array(1, 2, 3);              // [1, 2, 3]
let empty = Array(3);                          // [ <3 empty items > ]
let filled = Array(3).fill("x");               // ['x', 'x', 'x']

// ‚ñ∂Ô∏è Length
console.log(fruits.length);                    // 3

// ‚ñ∂Ô∏è Access & Indexing
console.log(fruits[0]);                        // 'apple'
console.log(fruits[fruits.length - 1]);        // 'cherry'

// ‚ñ∂Ô∏è Slicing (non-mutating)
console.log(fruits.slice(1, 3));               // ['banana', 'cherry']
console.log(fruits.slice(0));                  // copy full array

// ‚ñ∂Ô∏è Add Items
fruits.push("orange");                         // Add to end
fruits.unshift("kiwi");                        // Add to front

// ‚ñ∂Ô∏è Remove Items
fruits.pop();                                  // Remove from end
fruits.shift();                                // Remove from front

// ‚ñ∂Ô∏è Splice (add/remove in place)
fruits.splice(1, 0, "mango");                  // Insert at index 1
fruits.splice(2, 1);                           // Remove 1 item at index 2

// ‚ñ∂Ô∏è Copy (shallow)
let clone = fruits.slice();                    // non-mutating
let clone2 = [...fruits];                      // spread syntax

// ‚ñ∂Ô∏è Concatenate
let all = fruits.concat(["melon", "grape"]);
let all2 = [...fruits, "melon", "grape"];

// ‚ñ∂Ô∏è Searching
console.log(fruits.includes("banana"));        // true
console.log(fruits.indexOf("banana"));         // index or -1
console.log(fruits.lastIndexOf("banana"));     // from end
console.log(fruits.find(f => f.startsWith("b"))); // first match
console.log(fruits.findIndex(f => f === "banana")); // index of first match

// ‚ñ∂Ô∏è Iteration
fruits.forEach(f => console.log(f));           // no return
let upper = fruits.map(f => f.toUpperCase());  // ['APPLE',...]
let filtered = fruits.filter(f => f !== "banana");
let totalLength = fruits.reduce((acc, f) => acc + f.length, 0);

// ‚ñ∂Ô∏è Testing
console.log(fruits.every(f => typeof f === "string"));  // true
console.log(fruits.some(f => f === "banana"));          // true

// ‚ñ∂Ô∏è Sorting
let nums = [4, 1, 3];
nums.sort();                                   // [1, 3, 4] (by string!)
nums.sort((a, b) => a - b);                    // numeric sort

// ‚ñ∂Ô∏è Reverse
nums.reverse();                                // [4, 3, 1]

// ‚ñ∂Ô∏è Flattening
let nested = [1, [2, 3], [4, [5]]];
console.log(nested.flat());                    // [1, 2, 3, 4, [5]]
console.log(nested.flat(2));                   // [1, 2, 3, 4, 5]

// ‚ñ∂Ô∏è Fill
let marks = Array(4).fill(0);                  // [0, 0, 0, 0]
marks.fill(9, 1, 3);                           // [0, 9, 9, 0]

// ‚ñ∂Ô∏è from() and of()
console.log(Array.from("abc"));                // ['a', 'b', 'c']
console.log(Array.of(1, 2, 3));                // [1, 2, 3]

// ‚ñ∂Ô∏è Destructuring
let [a, b, ...rest] = fruits;

// ‚ñ∂Ô∏è Joining
console.log(fruits.join(", "));                // 'apple, banana'

// ‚ñ∂Ô∏è toString()
console.log(fruits.toString());                // 'apple,banana'

// ‚ñ∂Ô∏è Multidimensional
let matrix = [
  [1, 2],
  [3, 4]
];
console.log(matrix[1][0]);                     // 3


REGEX 
-----
| **Pattern**      | **Meaning**                         | **Example**                             | **Matches**                |                    |         |
| ---------------- | ----------------------------------- | --------------------------------------- | -------------------------- | ------------------ | ------- |
| `.`              | Any character except newline (`\n`) | `/a.c/` on `"abc"`                      | `"abc"`                    |                    |         |
| `^`              | Start of string                     | `/^abc/` on `"abcdef"`                  | `"abc"`                    |                    |         |
| `$`              | End of string                       | `/xyz$/` on `"endxyz"`                  | `"xyz"`                    |                    |         |
| `*`              | 0 or more times                     | `/lo*/` on `"looong"`                   | `"looo"`                   |                    |         |
| `+`              | 1 or more times                     | `/go+gle/` on `"google"`                | `"google"`                 |                    |         |
| `?`              | 0 or 1 time / lazy quantifier       | `/colou?r/` on `"color"` or `"colour"`  | `"color"` or `"colour"`    |                    |         |
| `{n}`            | Exactly n times                     | `/a{3}/` on `"aaab"`                    | `"aaa"`                    |                    |         |
| `{n,}`           | n or more times                     | `/a{2,}/` on `"aaaa"`                   | `"aaaa"`                   |                    |         |
| `{n,m}`          | Between n and m times               | `/a{2,4}/` on `"aaaaa"`                 | `"aaaa"`                   |                    |         |
| `[abc]`          | One of a, b, or c                   | `/[aeiou]/` on `"eat"`                  | `"e"`, `"a"`               |                    |         |
| `[^abc]`         | Not a, b, or c                      | `/[^aeiou]/` on `"cat"`                 | `"c"`, `"t"`               |                    |         |
| `[a-z]`          | Range (lowercase a‚Äìz)               | `/[a-z]/` on `"zebra"`                  | Any letter                 |                    |         |
| `(abc)`          | Capturing group                     | `/(\d+):(\d+)/` on `"10:20"`            | Captures `"10"` and `"20"` |                    |         |
| `(?:abc)`        | Non-capturing group                 | `/(?:ab)+/` on `"abab"`                 | `"abab"`                   |                    |         |
| `(?=abc)`        | Positive lookahead                  | `/\w+(?=:)` on `"key:value"`            | `"key"`                    |                    |         |
| `(?!abc)`        | Negative lookahead                  | `/foo(?!bar)/` on `"foobaz"`            | `"foo"`                    |                    |         |
| `(?<=abc)`       | Positive lookbehind                 | `/(?<=\$)\d+/` on `"$123"`              | `"123"`                    |                    |         |
| `(?<!abc)`       | Negative lookbehind                 | `/(?<!@)\w+/` on `"email user"`         | `"email"`, `"user"`        |                    |         |
| \`               | \`                                  | OR (alternation)                        | \`/cat                     | dog/`on`"my dog"\` | `"dog"` |
| `\d`             | Digit (0‚Äì9)                         | `/\d/` on `"abc123"`                    | `"1"`, `"2"`, `"3"`        |                    |         |
| `\D`             | Non-digit                           | `/\D/` on `"123a"`                      | `"a"`                      |                    |         |
| `\w`             | Word char \[a-zA-Z0-9\_]            | `/\w/` on `"var_1"`                     | `"v"`, `"a"`, `"r"`, `"_"` |                    |         |
| `\W`             | Non-word char                       | `/\W/` on `"hi!"`                       | `"!"`                      |                    |         |
| `\s`             | Whitespace (space, tab, newline)    | `/\s/` on `"a b"`                       | `" "`                      |                    |         |
| `\S`             | Non-whitespace                      | `/\S/` on `" a"`                        | `"a"`                      |                    |         |
| `\b`             | Word boundary                       | `/\bcat\b/` on `"black cat"`            | `"cat"`                    |                    |         |
| `\B`             | Not a word boundary                 | `/\Bend/` on `"bend"`                   | `"end"`                    |                    |         |
| `\\`             | Escaped backslash                   | `/\\/` on `"c:\\path"`                  | `"\\"`                     |                    |         |
| `\.`             | Literal dot                         | `/\./` on `"a.b"`                       | `"."`                      |                    |         |
| `(?s)` or `s`    | Dot matches newline (`dotAll`)      | `/a.*b/s` on `"a\nb"`                   | `"a\nb"`                   |                    |         |
| `(?m)` or `m`    | Multiline anchors                   | `/^abc/m` on `"xyz\nabc"`               | `"abc"`                    |                    |         |
| `(?i)` or `i`    | Case-insensitive                    | `/abc/i` on `"ABC"`                     | `"ABC"`                    |                    |         |
| `(?g)` or `g`    | Global match                        | `/red/g` on `"red, red"`                | All `"red"`                |                    |         |
| `(?y)` or `y`    | Sticky match                        | `/\d/y` with `.lastIndex = 1` on `"a1"` | `"1"` (only at index 1)    |                    |         |
| `\p{}` (Unicode) | Unicode character class (ES2018+)   | `/\p{Emoji}/u` on `"üòä"`                | `"üòä"`                     |                    |         |



// üì¶ Create Regex
let re1 = /hello/;                      // Literal notation
let re2 = new RegExp("hello", "i");     // Constructor with flags

// ‚ñ∂Ô∏è Test / Match / Search
console.log(/cat/.test("A black cat"));         // true
console.log("A black cat".match(/cat/));        // ['cat']
console.log("A black cat".search(/cat/));       // 10 (index)

// ‚ñ∂Ô∏è Global Match (all matches)
let text = "red, green, red, blue";
console.log(text.match(/red/g));                // ['red', 'red']

// ‚ñ∂Ô∏è Match with capturing groups
let str = "John: 25, Alice: 30";
let result = str.match(/(\w+): (\d+)/);
console.log(result[1]);                         // 'John'
console.log(result[2]);                         // '25'

// ‚ñ∂Ô∏è Replace
console.log("I love cats".replace(/cats/, "dogs")); // 'I love dogs'
console.log("foo123bar456".replace(/\d+/g, "#"));   // 'foo#bar#'

// ‚ñ∂Ô∏è Split using regex
let sentence = "one, two; three.four";
console.log(sentence.split(/[,;.]\s*/));        // ['one', 'two', 'three', 'four']

// ‚ñ∂Ô∏è Flags
// i = ignore case, g = global, m = multiline, s = dotAll, u = unicode, y = sticky
let flags = /hello/gi;

// ‚ñ∂Ô∏è Special Characters
// . = any char, \d = digit, \w = word, \s = space, \b = word boundary
// ^ = start, $ = end, [] = char set, () = capture, | = OR, ? = optional, * = 0+, + = 1+

console.log(/^\d{3}-\d{2}-\d{4}$/.test("123-45-6789")); // true

// ‚ñ∂Ô∏è Character Classes
console.log(/[aeiou]/.test("apple"));            // true
console.log(/[^0-9]/.test("123a"));              // true (non-digit found)

// ‚ñ∂Ô∏è Quantifiers
console.log(/a{2,4}/.test("aaa"));               // true (2-4 a's)
console.log(/go+gle/.test("google"));            // true

// ‚ñ∂Ô∏è Anchors
console.log(/^start/.test("start here"));        // true
console.log(/end$/.test("reach the end"));       // true

// ‚ñ∂Ô∏è Escaping special chars
console.log(/\$100/.test("$100"));               // true
console.log(/file\.txt/.test("file.txt"));       // true

// ‚ñ∂Ô∏è OR (alternation)
console.log(/cat|dog/.test("I like dogs"));      // true

// ‚ñ∂Ô∏è Non-capturing group
console.log(/(?:foo)+/.test("foofoo"));          // true

// ‚ñ∂Ô∏è Lazy Matching
let lazy = "<b>bold</b><b>more</b>";
console.log(lazy.match(/<b>.*?<\/b>/g));         // ['<b>bold</b>', '<b>more</b>']

// ‚ñ∂Ô∏è Lookahead / Lookbehind (ES2018+)
console.log(/Java(?=Script)/.test("JavaScript"));    // ‚úÖ 'Java' only if followed by 'Script'
console.log(/(?<=\$)\d+/.test("$200"));              // ‚úÖ only digits after $

console.log(/apple(?! pie)/.test("apple juice"));    // ‚úÖ 'apple' not followed by 'pie'

// ‚ñ∂Ô∏è RegExp Object Methods
let pattern = /red/g;
let match;
while ((match = pattern.exec("red, red, blue")) !== null) {
  console.log(match.index);                   // 0, 6
}

// ‚ñ∂Ô∏è Using matchAll (ES2020+)
let matches = [..."foo1bar2baz3".matchAll(/\d/g)];
console.log(matches.map(m => m[0]));           // ['1', '2', '3']

// ‚ñ∂Ô∏è Unicode Matching (ES6+)
let smile = "üòä";
console.log(/\p{Emoji}/u.test(smile));         // true (unicode emoji match)

// ‚ñ∂Ô∏è Common Real-World Patterns
let email = "test@email.com";
console.log(/^[\w.-]+@\w+\.\w+$/.test(email));   // ‚úÖ simple email pattern

let phone = "+91-9876543210";
console.log(/^\+?\d{1,3}-?\d{10}$/.test(phone)); // ‚úÖ phone number

let hex = "#a3f2c1";
console.log(/^#?[0-9a-f]{6}$/i.test(hex));       // ‚úÖ hex color

let username = "user_name1";
console.log(/^[a-z0-9_]{3,15}$/i.test(username)); // ‚úÖ username rule

// ‚ñ∂Ô∏è Word Boundaries
console.log(/\bcat\b/.test("the cat sat"));     // true (whole word match)
console.log(/\bcat\b/.test("category"));        // false

// ‚ñ∂Ô∏è DotAll with s flag
console.log(/a.*b/.test("a\nb"));               // false
console.log(/a.*b/s.test("a\nb"));              // true (dotAll flag)

// ‚ñ∂Ô∏è Sticky flag (y)
let sticky = /red/y;
sticky.lastIndex = 5;
console.log(sticky.test("blue red green"));     // false (no match at index 5)


DATE 
-----
// üì¶ Create Dates
let now = new Date();                         // current date & time (e.g. 2025-05-31T08:30:00.000Z)
let specific = new Date("2023-05-31T10:30:00Z"); // ISO string
console.log(specific.toISOString());         // "2023-05-31T10:30:00.000Z"

let fromMs = new Date(1685500200000);        // from timestamp (ms since 1970)
console.log(fromMs.toISOString());            // "2023-05-31T10:30:00.000Z"

let fromParts = new Date(2023, 4, 31, 10, 30, 0); // month is 0-based
console.log(fromParts.toISOString());         // "2023-05-31T04:30:00.000Z" (UTC time, may vary by timezone)

// ‚ñ∂Ô∏è Get Components (local time)
console.log(now.getFullYear());               // e.g. 2025
console.log(now.getMonth());                   // 0-11 (e.g. 4 for May)
console.log(now.getDate());                    // 1-31 (e.g. 31)
console.log(now.getDay());                     // 0-6 (0=Sunday)
console.log(now.getHours());                   // 0-23 (local hour)
console.log(now.getMinutes());                 // 0-59
console.log(now.getSeconds());                 // 0-59
console.log(now.getMilliseconds());            // 0-999

// ‚ñ∂Ô∏è UTC Getters
console.log(now.getUTCFullYear());             // e.g. 2025
console.log(now.getUTCMonth());                 // 0-11 (UTC month)
console.log(now.getUTCDate());                  // 1-31 (UTC day)

// ‚ñ∂Ô∏è Set Components (local time)
now.setFullYear(2024);
now.setMonth(11);     // December (11)
now.setDate(25);
now.setHours(15);
now.setMinutes(45);
now.setSeconds(30);
console.log(now.toString());                   // e.g. "Wed Dec 25 2024 15:45:30 GMT+0530 (India Standard Time)"

// ‚ñ∂Ô∏è Date Comparisons
let d1 = new Date("2023-01-01");
let d2 = new Date("2024-01-01");
console.log(d1 < d2);                         // true
console.log(d1.getTime() === d2.getTime());   // false

// ‚ñ∂Ô∏è Formatting (basic)
console.log(now.toString());                   // e.g. "Wed Dec 25 2024 15:45:30 GMT+0530 (India Standard Time)"
console.log(now.toISOString());                 // "2024-12-25T10:15:30.000Z"
console.log(now.toUTCString());                 // "Wed, 25 Dec 2024 10:15:30 GMT"
console.log(now.toDateString());                // "Wed Dec 25 2024"
console.log(now.toTimeString());                // "15:45:30 GMT+0530 (India Standard Time)"

// ‚ñ∂Ô∏è Parsing Dates
console.log(Date.parse("2023-05-31T10:30:00Z")); // 1685500200000 (timestamp in ms)
console.log(new Date(Date.parse("2023-05-31")));  // Wed May 31 2023 05:30:00 GMT+0530 (India Standard Time)

// ‚ñ∂Ô∏è Get Timestamp (ms since epoch)
console.log(Date.now());                        // e.g. 1722535800000 (current timestamp)
console.log(now.getTime());                      // e.g. 1735001130000

// ‚ñ∂Ô∏è Useful Methods
console.log(now.valueOf());                      // same as getTime() e.g. 1735001130000
console.log(now.toLocaleDateString());           // e.g. "12/25/2024" (depends on locale)
console.log(now.toLocaleTimeString());           // e.g. "3:45:30 PM" (depends on locale)

// ‚ñ∂Ô∏è Add/Subtract Days (via ms math)
function addDays(date, days) {
  return new Date(date.getTime() + days * 24 * 60 * 60 * 1000);
}
console.log(addDays(new Date("2023-01-01"), 5).toISOString()); // "2023-01-06T00:00:00.000Z"

// ‚ñ∂Ô∏è Difference in days
function diffDays(d1, d2) {
  const msPerDay = 24 * 60 * 60 * 1000;
  return Math.floor((d2 - d1) / msPerDay);
}
console.log(diffDays(new Date("2023-01-01"), new Date("2023-01-31"))); // 30

// ‚ñ∂Ô∏è Get week number (ISO 8601 example)
function getWeekNumber(date) {
  const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));
  const dayNum = d.getUTCDay() || 7;
  d.setUTCDate(d.getUTCDate() + 4 - dayNum);
  const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
  return Math.ceil(((d - yearStart) / 86400000 + 1) / 7);
}
console.log(getWeekNumber(new Date("2025-05-31")));  // e.g. 22 (week number)

// ‚ñ∂Ô∏è Invalid Date
let invalid = new Date("not a date");
console.log(isNaN(invalid));                // true, invalid date check

fUNCTIONS
---------
// ‚ñ∂Ô∏è Function Declaration (named function)
function greet(name) {
  return `Hello, ${name}!`;
}
console.log(greet("Alice"));            // "Hello, Alice!"

// ‚ñ∂Ô∏è Function Expression (anonymous or named)
const add = function (a, b) {
  return a + b;
};
console.log(add(2, 3));                 // 5

// ‚ñ∂Ô∏è Arrow Functions (ES6+)
const multiply = (x, y) => x * y;
console.log(multiply(4, 5));            // 20

const square = n => n * n;               // single param no parentheses
console.log(square(6));                  // 36

// ‚ñ∂Ô∏è Immediately Invoked Function Expression (IIFE)
(function () {
  console.log("IIFE executed");
})();

// ‚ñ∂Ô∏è Function Constructor (not common, but exists)
const sum = new Function("a", "b", "return a + b;");
console.log(sum(1, 2));                  // 3

// ‚ñ∂Ô∏è Functions as first-class objects:
function outer() {
  return function inner() {
    return "Hello from inner";
  };
}
console.log(outer()());                   // "Hello from inner"

// ‚ñ∂Ô∏è Function Properties
function sample() {}
console.log(sample.length);               // Number of declared parameters (0)
console.log(sample.name);                 // Function name "sample"

// ‚ñ∂Ô∏è Call, Apply, Bind
function sayHi(age) {
  console.log(`${this.name} is ${age} years old.`);
}

const person = { name: "Bob" };
sayHi.call(person, 25);                   // Bob is 25 years old.
sayHi.apply(person, [25]);                // Bob is 25 years old.

const boundFunc = sayHi.bind(person, 30);
boundFunc();                             // Bob is 30 years old.

// ‚ñ∂Ô∏è Rest Parameters and Default Parameters
function restDefault(a, b = 2, ...rest) {
  console.log(a, b, rest);
}
restDefault(1);                          // 1 2 []
restDefault(1, 5, 6, 7);                 // 1 5 [6, 7]

// ‚ñ∂Ô∏è Generator Functions (ES6+)
function* gen() {
  yield 1;
  yield 2;
  yield 3;
}
const g = gen();
console.log(g.next());                   // {value:1, done:false}
console.log(g.next());                   // {value:2, done:false}
console.log(g.next());                   // {value:3, done:false}
console.log(g.next());                   // {value:undefined, done:true}

// ‚ñ∂Ô∏è Async Functions (ES2017+)
async function asyncFunc() {
  return "Async result";
}
asyncFunc().then(console.log);           // "Async result"

// ‚ñ∂Ô∏è Function constructor properties & methods summary:
//   - Function.length (param count)
//   - Function.name
//   - Function.prototype.call()
//   - Function.prototype.apply()
//   - Function.prototype.bind()

// ‚ñ∂Ô∏è Common Built-in Global Functions (examples)
console.log(parseInt("123"));            // 123
console.log(parseFloat("12.34"));        // 12.34
console.log(isNaN("abc"));                // true
console.log(isFinite(100));               // true
console.log(eval("2 + 2"));               // 4 (avoid using eval when possible)

// ‚ñ∂Ô∏è Useful Function Helpers
const debounce = (fn, delay) => {
  let timer;
  return function (...args) {
    clearTimeout(timer);
    timer = setTimeout(() => fn.apply(this, args), delay);
  };
};

const throttle = (fn, limit) => {
  let inThrottle;
  return function (...args) {
    if (!inThrottle) {
      fn.apply(this, args);
      inThrottle = true;
      setTimeout(() => (inThrottle = false), limit);
    }
  };
};


TYPE CONVERSION
-----------------
// --- Implicit Conversions (Coercion) ---
console.log(5 + "5");           // "55"  (number 5 ‚Üí string "5")
console.log(true + 1);          // 2     (true ‚Üí 1)
console.log("5" * 2);           // 10    ("5" ‚Üí number 5)
console.log(null == 0);         // false
console.log(null >= 0);         // true  (null ‚Üí 0)
console.log(undefined == null); // true
console.log(undefined == 0);    // false
console.log("0" == 0);          // true  ("0" ‚Üí 0)
console.log(false == 0);        // true  (false ‚Üí 0)

// --- Explicit Conversions ---
console.log(String(123));       // "123"
console.log((123).toString());  // "123"
console.log(Number("123"));     // 123
console.log(+"123");            // 123 (unary plus)
console.log(Boolean(0));        // false
console.log(Boolean(""));       // false
console.log(parseInt("42px"));  // 42
console.log(parseFloat("3.14"));// 3.14

// --- Common conversions ---
console.log(String(null));      // "null"
console.log(String(undefined)); // "undefined"
console.log(String(true));      // "true"

console.log(Number(""));        // 0
console.log(Number(" "));       // 0 (spaces trimmed)
console.log(Number(null));      // 0
console.log(Number(undefined)); // NaN
console.log(Number(false));     // 0
console.log(Number(true));      // 1

console.log(Boolean(0));        // false
console.log(Boolean(""));       // false
console.log(Boolean(null));     // false
console.log(Boolean(undefined));// false
console.log(Boolean(NaN));      // false
console.log(Boolean(false));    // false

console.log(Boolean("0"));      // true
console.log(Boolean("false"));  // true
console.log(Boolean([]));       // true
console.log(Boolean({}));       // true

// --- Special cases ---
console.log(+"hello");          // NaN

console.log(1 + 2 + "3");       // "33"  (1+2=3, then 3+"3" = "33")
console.log("1" + 2 + 3);       // "123" ("1"+2="12", then "12"+3="123")

console.log(Number(null));      // 0
console.log(Number(undefined)); // NaN

console.log(0 == false);        // true  (coerced)
console.log(0 === false);       // false (strict equality)

const obj = {
  toString() { return "10"; },
  valueOf() { return 20; }
};
console.log(Number(obj));       // 20 (valueOf used)
console.log(String(obj));       // "10" (toString used)
