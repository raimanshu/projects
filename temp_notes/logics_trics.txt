# Sum of Series
 (n*(n+1))/2
 for n=5. sum = 15 

=====================================================================================================================

# Sum of the series using Arthematic Progression
 Sum = n/2 * [2a + (n-1)d], where 'a' is the first term, 'd' is the common difference, and 'n' is the number of terms. 

=====================================================================================================================

# For checking even number, n%2 ==0

=====================================================================================================================

# For checking odd number, n%2 !0

=====================================================================================================================

# If number starts with 0, then to get all odd numbers 
for(let i = 1; i < n; i+2){
    console.log(i + " ");
}

=====================================================================================================================

Print 1 To N Without Loop
function printNumbers(n){
    if(n > 0)
}

=====================================================================================================================

# Check pallindrome  number or not (121, 12321, "abcba", etc)
METHOD 1 : Using builtin methods
  let numStr = num.toString();
  let numStrReversed = num.toString().split("").reverse().join("");
  mumStr == numStrReversed ? "Pallindrome" : "Not Pallindrome";
----------------------------------------------------------------------------------------------------------------------
METHOD 2 : Without using builtin methods
let n = num;
let rev = 0;
while (num > 0)
{
    dig = num % 10;
    rev = rev * 10 + dig;
    num = num / 10;
}
n === rev ? "Pallindrome" : "Not Pallindrome";

METHOD :: 3
    isPalindrome(S){
        //code here
        // Method 1 :: Using brute force 
         if(S.length == 0) return 0;
          let arr = Array.from(S);
          while(arr.length > 0){
            if(arr.shift() !== arr.pop()){
              return 0;
            }
          }
          return 1;
    }

Method :: 4 
    isPalindrome(S){
         S = S.toLowerCase();
          let start = 0;
          let end = S.length - 1;
           while (start < end) {
        if (S[start] !== S[end]) {
            return 0;
        }
        
        start++;
        end--;
    }
    
    return 1;
    }

=====================================================================================================================

# Find Median of arr
    let fullsorted = []
    if (nums1.length >= 1 && nums2.length >= 1) {
        fullsorted = [...nums1, ...nums2]
        fullsorted = fullsorted.sort((a, b) => a - b)
    } else {
        if (nums1.length == 0) {
            fullsorted = [...nums2]
        }
        else if (nums2.length == 0) {
            fullsorted = [...nums1]
        }
    }
    if (fullsorted.length % 2 === 1) {
        return fullsorted[(fullsorted.length - 1) / 2]
    } else {
        let mean = (fullsorted[(fullsorted.length / 2) - 1] + fullsorted[(fullsorted.length / 2)]) / 2
        return mean
    }

=====================================================================================================================

Armstring Number - 3^3 + 7^3 + 1^3 = 371, 1^3 + 5^3 + 3^3 = 153, etc

=====================================================================================================================
Check if the string contains only binary data
Using isNaN() ❌
A string is said to contain binary data if it contains characters other than 0 and 1. ✅✅

=====================================================================================================================

Check if strings are rotations of each other or not
function areRotations(s1, s2) {
    let str=s1+s1;
    let i=0;
    let j=0;
    while(i < str.length && j < s2.length){
        if(str.charAt(i)==s2.charAt(j)){
            
            i++;j++;
        }
        else{
            i++;
        }
    }
    return j==s2.length ? 1 : 0;
}

=====================================================================================================================

Avoid using extra variables;
function test(arr,n){
  let sum =0;
  return arr.forEach(value => sum += value); 
}

or

function test(arr,n){
  return arr.reduce((a,b) => a+b);
  }

=====================================================================================================================

Arthematic Progression 
Nth term of an Ap =a1+(N-1)*(common difference)
Find N such that (an)%m=0 for given values of a1,a2,a3...and m
We can use Fermat’s Last Theorem which states: If there exists a prime number p such that p^2 divides (b−a), then there also exist integers x and
We can use the formula n=(a1 + ((a2 - a1)/(a2 - a1 % m)) * (a2 - a1))/difference between a2 and a1  

=====================================================================================================================

Swaping numbers 
METHOD 1 - Using temporary variables 
let temp;
temp = a;
a = b;
b = temp;

METHOD 2 - Using array destructuring
[a, b] = [b, a];

METHOD 3 -  Bitwise XOR operator
a ^= a;
b ^= b;
a ^= b;

METHOD 4 - Using Arthematic Operations (ADD & SUB)
a += b;
b = a - b;
a -= b;

METHOD 5 - Using Arthematic Operations (MUL & DIVIDE)
a *= b;
b /= a;
a /= b;

=====================================================================================================================

Fibonacci series 
METHOD 1:: Using For loop 
function fibonacci(n) {
  let series = [0, 1];
  for (let i = 2; i < n; i++) {
    series.push(series[i - 1] + series[i - 2]);
  }
  return series;
}
METHOD 2:: Using  Recursion 
function fibonacci(n) {
  if (n < 2) {
    return n;
  } else {
    return fibonacci(n - 1) + fibonacci(n - 2);
  }
}

=====================================================================================================================
Find mid index  of an array in JavaScript?

mid = Math.floor(arr.length / 2)

mid = low + (high-low)/2

=====================================================================================================================
Intersection between two arrays
METHOD 1:: Using Set
const set1 = new Set(arr1);
const set2 = new Set(arr2);
const intersection = new Set([...set1].filter(x => set2.has(x)));

METHOD 2:: Using filter 
const intersection = arr1.filter(element => arr2.includes(element));

=====================================================================================================================
remove all spaces
Method 1 :: using replaceAll()
s.replaceAll(" ","");
Method 2 :: Using split() and join()
s.split(" ").join("");