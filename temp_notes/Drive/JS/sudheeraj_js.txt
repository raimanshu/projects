JAVASCRIPT INTERVIEW QUESTIONS
- What are web api ?
REST (Representational State Transfer) API has no has no official standard at all because it is an architectural style. SOAP (Simple Object Access Protocol) API, on the other hand, has an official standard because it is a protocol.
• REST APIs uses multiple standards like HTTP, JSON, URL, and XML while SOAP APIs is
largely based on HTTP and XML.
• As REST API deploys multiple standards, so it takes fewer resources and bandwidth as
compared to SOAP that uses XML for the creation of Payload and results in the large sized
file.
• The ways both APIs exposes the business logics are also different. REST API takes
advantage of URL exposure like @path("/WeatherService") while SOAP API use of services
interfaces like @WebService.
• SOAP API defines too many standards, and its implementer implements the things in a
standard way only. In the case of miscommunication from service, the result will be the
error. REST API, on the other hand, don't make emphasis on too many standards and results
in corrupt API in the end.
• REST API uses Web Application Description Language, and SOAP API used Web Services
Description language for describing the functionalities being offered by web services.
• REST APIs are more convenient with JavaScript and can be implemented easily as well.
SOAP APIs are also convenient with JavaScript but don't support for greater
implementation.
Iffe
hoisting
- throttling vs debouncing
Throttling enforces a maximum number of times a function can be called overtime. As in "execute this function at most once every 100 milliseconds." Say under normal circumstances you would call this function 1,000 times over 10 seconds. If you throttle it to only once per 100 milliseconds, it would only execute that function at most 100 times
Debouncing enforces that a function not be called again until a certain amount of time has passed without it being called. As in "execute this function only if 100 milliseconds have passed without it being called."
transformations
- web workers vs service workers
Web Workers[1]:
Web Workers is a simple means for web content to run scripts in background threads. The
worker thread can perform tasks without interfering with the user interface. In addition, they can
perform I/O using XMLHttpRequest (although the responseXML and channel attributes are
always null). Once created, a worker can send messages to the JavaScript code that created it by
posting messages to an event handler specified by that code (and vice versa.)
Example Usage: Browser extensions and HTML5 games
Service Workers[2]:Service workers essentially act as proxy servers that sit between web applications, the browser,
and the network (when available). They are intended, among other things, to enable the creation
of effective offline experiences, intercept network requests and take appropriate action based on
whether the network is available, and update assets residing on the server. They will also allow
access to push notifications and background sync APIs.
Example Usage: Progressive Web Apps
- PWA
promises
callback
constructor
web workers vs service workers
OOPs concept in js – class, object,
-------------------------------------------------------------------------------------------------------------------------
1 What are the possible ways to create objects in JavaScript - Object constructor new Object(); Object create method Object.create(null); Object literal syntax var obj = {}; Function constructor
 function Person(name){
var object = {};
object.name=name;
object.age=21;
return object;
}
var object = new Person("Sudheer");
ES6 class syntax
class Person {
constructor(name) {
this.name = name;
}
}
var object = new Person("Sudheer");
Singleton pattern
var object = new function(){
this.name = "Sudheer";
}
2 What is prototype chain - Prototype chaining is used to build new types of objects based on existing ones. It is similar to inheritance in a class based language.
3 What is the difference between Call, Apply and Bind
4 What is JSON and its common operations - JSON is a text-based data format following JavaScript object syntax, which was popularized by Douglas Crockford . It is useful when you want to transmit data across a network and it is basically just a text file with an extension of .json, and a MIME type of application/json
5 What is the purpose of the array slice method - returns the selected elements in an array as a new array object.
6 What is the purpose of the array splice method - used either adds/removes items to/from an array, and then returns the removed item.
7 What is the difference between slice and splice
8 How do you compare Object and Map
9 What is the difference between == and === operators
10 What are lambda or arrow functions - shorter syntax for a function expression and does not have its own this, arguments, super, or new.target.
11 What is a first class function - First-class functions means when functions in that language are treated like any other variable.
12 What is a first order function - First-order function is a function that doesn’t accept another function as an argument and doesn’t return a function as its return value.
13 What is a higher order function - Higher-order function is a function that accepts another function as an argument or returns a function as a return value or both.
14 What is a unary function - function that accepts exactly one argument.
15 What is the currying function - process of taking a function with multiple arguments and turning it into a sequence of functions each with only a single argument.
16 What is a pure function - function where the return value is only determined by its arguments without any side effects. i.e, If you call a function with the same arguments 'n' number of times and 'n' number of places in the application then it will always return the same value.
17 What is the purpose of the let keyword - let statement declares a block scope local variable.
18 What is the difference between let and var
19 What is the reason to choose the name let as a keyword
20 How do you redeclare variables in switch block without an error - use {} braces after cases
21 What is the Temporal Dead Zone - accessing a let or const variable before its declaration (within its scope) causes a ReferenceError.
22 What is IIFE(Immediately Invoked Function Expression) - function that runs as soon as it is defined.
23 What is the benefit of using modules - Modularity, Reusability, Namespacing
24 What is memoization - programming technique which attempts to increase a function’s
performance by caching its previously computed results.
25 What is Hoisting - JavaScript default mechanism where variables and function declarations are moved to the top of their scope before code execution.
26 What are classes in ES6 - primarily syntactic sugar over JavaScript’s existing prototype-based inheritance.
27 What are closures - It is an inner function that has access to the outer or enclosing function’s variables.
28 What are modules - small units of independent, reusable code and also act as the foundation of many JavaScript design patterns.
29 Why do you need modules - Maintainabilty, reuseability, Namespacing
30 What is scope in javascript - It is the accessibility of variables, functions, and objects in some
particular part of your code during runtime.
31 What is a service worker - basically a script (JavaScript file) that runs in the background, separate from a web page and provides features that don't need a web page or user interaction.
32 How do you manipulate DOM using a service worker - messages sent via the postMessage
33 How do you reuse information across service worker restarts - uses IndexedDB API in order to persist and reuse across restarts.
34 What is IndexedDB - low-level API for client-side storage of larger amounts of structured data, including files/blobs.
35 What is web storage - API that provides a mechanism by which browsers can store key/value pairs locally within the user's browser, in a much more intuitive fashion than
using cookies.
36 What is a post message - method that enables cross-origin communication between Window objects.
37 What is a cookie - piece of data that is stored on your computer to be accessed by your
browser. Cookies are saved as key/value pairs.
38 Why do you need a Cookie - used to remember information about the user profile
39 What are the options in a cookie - by setting the expiry date and path parameter
40 How do you delete a cookie - by setting the expiry date as a passed date.
41 What are the differences between cookie, local storage and session storage
42 What is the main difference between localStorage and sessionStorage
43 How do you access web storage - The Window object implements the WindowLocalStorage and WindowSessionStorage objects which has localStorage (window.localStorage) and sessionStorage (window.sessionStorage) properties respectively.
44 What are the methods available on session storage - getItem(),setItem(),removeitem(),clear()
45 What is a storage event and its event handler - event that fires when a storage area has been changed in the context of another document. onstorage property is an EventHandler for
processing storage events. window.onstorage = functionRef;
46 Why do you need web storage - more secure, and large amounts of data can be stored locally, without affecting website performance, information is never transferred to the server.
47 How do you check web storage browser support - typeof(Storage) !== "undefined"
48 How do you check web workers browser support - typeof(Worker) !== "undefined"
49 Give an example of web worker 
50 What are the restrictions of web workers on DOM - window object, document object, Parent object
51 What is a promise - A promise is an object that may produce a single value some time in the  future with either a resolved value or a reason that it’s not resolved(for example, network error). It will be in one of the 3 possible states: fulfilled, rejected, or pending.
52 Why do you need a promise - handle asynchronous operations., alternative to callback
53 What are the three states of promise - pending, fulfilled,rejected
54 What is a callback function - function passed into another function as an argument.
55 Why do we need callbacks - instead of waiting for a response javascript will keep executing while listening for other events.
56 What is a callback hell - Callback Hell is an anti-pattern with multiple nested callbacks which  makes code hard to read and debug when dealing with asynchronous logic.
57 What is server-sent events - server push technology enabling a browser to receive automatic  updates from a server via HTTP connection without resorting to polling.
58 How do you receive server-sent event notifications - using onmessage method- using onmessage() method of EventSource object 
59 How do you check browser support for server-sent events - typeof(EventSource) !==
"undefined"
60 What are the events available for server sent events - onopen, onmessage, onerror - onopen, onmessage, onerror
61 What are the main rules of promise
62 What is callback in callback - nest one callback inside in another callback to execute the actions sequentially one by one.
63 What is promise chaining - executing a sequence of asynchronous tasks one after another using promises
64 What is promise.all - promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected.
65 What is the purpose of race method in promise - return the promise instance which is firstly  resolved or rejected
66 What is a strict mode in javascript - it prevents certain actions from being taken and throws more exceptions.
67 Why do you need strict mode - useful to write "secure" JavaScript by notifying "bad syntax" into real errors.
68 How do you declare strict mode - generally top of script but can anywhere
69 What is the purpose of double exclamation - ensures the resulting type is a boolean.
70 What is the purpose of delete operator - delete the property as well as its value.
71 What is typeof operator - returns the type of a variable or an expression.
72 What is undefined property - indicates that a variable has not been assigned a value, or not declared at all.
73 What is null value - represents the intentional absence of any object value.
74 What is the difference between null and undefined
75 What is eval - evaluates JavaScript code represented as a string.
76 What is the difference between window and document
77 How do you access history in javascript - window.history object
78 How do you detect caps lock key turned on or not - mouseEvent.getModifierState("CapsLock");
79 What is isNaN - determine whether a value is an illegal number (Not-a-Number) or not.
80 What are the differences between undeclared and undefined variables
81 What are global variables - available throughout the length of the code without any scope.
82 What are the problems with global variables - conflict in variable names, difficult debug and test
83 What is NaN property - indicates that a value is not a legal number
84 What is the purpose of isFinite function - used to determine whether a number is a finite, legal number, returns false if the value is +infinity, -infinity, or NaN (Not-a-Number)
85 What is an event flow - order in which event is received on the web page.
86 What is event bubbling - event propagation where the event first triggers on the innermost target element, and then successively triggers on the ancestors (parents) of the target element in the same nesting hierarchy till it reaches the outermost DOM element.
87 What is event capturing - event propagation where the event is first captured by the outermost element, and then successively triggers on the descendants (children) of the target element in the same nesting hierarchy till it reaches the innermost DOM element.
88 How do you submit a form using JavaScript - document.form[0].submit();
89 How do you find operating system details - console.log(navigator.platform);
90 What is the difference between document load and DOMContentLoaded events
91 What is the difference between native, host and user objects
92 What are the tools or techniques used for debugging JavaScript code - Chrome Devtools, debugger statement, console.log statement
93 What are the pros and cons of promises over callbacks
94 What is the difference between an attribute and a property - Attributes are defined on the
HTML markup whereas properties are defined on the DOM.
95 What is same-origin policy - The same-origin policy is a policy that prevents JavaScript from making requests across domain boundaries.
96 What is the purpose of void 0 - prevent the page from refreshing, return the undefined primitive value
97 Is JavaScript a compiled or interpreted language - interpreted language
98 Is JavaScript a case-sensitive language - yes
99 Is there any relation between Java and JavaScript - no
100 What are events - "actions" that happen to HTML elements.
101 Who created javascript - Brendan Eich in 1995
102 What is the use of preventDefault method - method cancels the event if it is cancelable, meaning that the default action or behaviour that belongs to the event will not occur.
103 What is the use of stopPropagation method - used to stop the event from bubbling up the event chain.
104 What are the steps involved in return false
105 What is BOM - allows JavaScript to "talk to" the browser. It consists of the objects navigator, history, screen, location and document which are children of the window.
106 What is the use of setTimeout - call a function or evaluate an expression after a specified number of milliseconds.
107 What is the use of setInterval - call a function or evaluate an expression at specified intervals (in milliseconds).
108 Why is JavaScript treated as Single threaded
109 What is an event delegation - technique for listening to events where you delegate a parent element as the listener for all of the events that happen inside it.
110 What is ECMAScript - scripting language that forms the basis of JavaScript.
111 What is JSON - ightweight format that is used for data interchanging.
112 What are the syntax rules of JSON
113 What is the purpose JSON stringify - When sending data to a web server, the data has to be in a string format.
114 How do you parse JSON string - When receiving the data from a web server, the data is always in a string format.
115 Why do you need JSON - When exchanging data between a browser and a server, the data can only be text. Since JSON is text only,
116 What are PWAs - type of mobile app delivered through the web, built using common web
technologies including HTML, CSS and JavaScript. These PWAs are deployed to servers,
accessible through URLs, and indexed by search engines.
117 What is the purpose of clearTimeout method - clear the timeout which has been set by
setTimeout()function
118 What is the purpose of clearInterval method - clear the interval which has been set by setInterval() function.
119 How do you redirect new page in javascript - window.location.href = 'newPage.html';
120 How do you check whether a string contains a substring - includes,regex,indexOf
121 How do you validate an email in javascript - using regex
122 How do you get the current url with javascript - console.log('location.href',
window.location.href);
123 What are the various url properties of location object - href,protocol,host,hostname,port,pathname,search,hash	
124 How do get query string values in javascript - URLSearchParams
125 How do you check if a key exists in an object - in operator, hasOwnProperty(), undefined
comparision
126 How do you loop through or enumerate javascript object - for-in loop
127 How do you test for an empty object - Object.entries(), Object.keys(), for-in loop with
hasOwnProperty()
128 What is an arguments object - is an Array-like object accessible inside functions that contains the values of the arguments passed to that function.
129 How do you make first letter of the string in an uppercase - string.charAt(0).toUpperCase() + string.slice(1);
130 What are the pros and cons of for loop
131 How do you display the current date in javascript - new Date()
132 How do you compare two date objects - d1.getTime() === d2.getTime()
133 How do you check if a string starts with another string - String.startsWith()
134 How do you trim a string in javascript - trim()
135 How do you add a key value pair in javascript - dot notaion, square bracket notation
136 Is the '!--' notation represents a special operator - No
137 How do you assign default values to variables - logical or operator || var a = b || c;
138 How do you define multiline strings - using  ` ` and escape character \n
139 What is an app shell model - way to build a Progressive Web App that reliably and instantly loads on your users' screens, similar to what you see in native applications.
140 Can we define properties for functions - yes because functions are also objects.
141 What is the way to find the number of parameters expected by a function - function.length
142 What is a polyfill - piece of JS code used to provide modern functionality on older browsers that do not natively support it.
143 What are break and continue statements - break statement is used to "jump out" of a loop. Continue statement is used to "jump over" one iteration in the loop.
144 What are js labels - allows us to name loops and blocks in JavaScript.
145 What are the benefits of keeping declarations at the top
146 What are the benefits of initializing variables
147 What are the recommendations to create new object
148 How do you define JSON arrays - written inside square brackets and arrays contain javascript objects.
149 How do you generate random integers - Math.floor(Math.random() * 10) + 1;
150 Can you write a random integers function to print integers with in a range - Math.floor(Math.random() * (max - min + 1) ) + min;
151 What is tree shaking - means that unused modules will not be included in the bundle during the build process and for that it relies on the static structure of ES2015 module syntax,( i.e. import and export).Tree shaking is implemented in Rollup and Webpack bundlers.
152 What is the need of tree shaking - reduce the code size in any application from MB to KB
153 Is it recommended to use eval - No because causes a security problem.
154 What is a Regular Expression - sequence of characters that forms a search pattern.
155 What are the string methods available in Regular expression - search() and replace().
156 What are modifiers in regular expression - used to perform case-insensitive, global & multiline searches.
157 What are regular expression patterns - Brackets, metacharacters, Quantifiers
158 What is a RegExp object - regular expression object with predefined properties and methods.
159 How do you search a string for a pattern - pattern.test("How are you?")
160 What is the purpose of exec method - similar to test method but it executes a search for a match in a specified string and returns a result array, or null instead of returning true/false.
161 How do you change style of a HTML element - using.style[‘property] and .className[property]
162 What would be the result of 1+2+'3' - 33
163 What is a debugger statement - statement invokes any available debugging functionality, such as setting a breakpoint.
164 What is the purpose of breakpoints in debugging - javascript will stop executing, and let you
examine the JavaScript values.
165 Can I use reserved words as identifiers - No
166 How do you detect a mobile browser - navigator.userAgent()
167 How do you detect a mobile browser without regexp - 
if( navigator.userAgent.match(/Android/i)
|| navigator.userAgent.match(/webOS/i)
|| navigator.userAgent.match(/iPhone/i)
|| navigator.userAgent.match(/iPad/i)
|| navigator.userAgent.match(/iPod/i)
|| navigator.userAgent.match(/BlackBerry/i)
|| navigator.userAgent.match(/Windows Phone/i)
){}
168 How do you get the image width and height using JS - var img = new Image(); img.onload = function(){this.height ‘+’ this.width}
169 How do you make synchronous HTTP request - var xmlHttpReq = new XMLHttpRequest(); xmlHttpReq.open( "GET", theUrl, false ); xmlHttpReq.send( null );
170 How do you make asynchronous HTTP request - var xmlHttpReq = new XMLHttpRequest(); xmlHttpReq.open( "GET", theUrl, true ); xmlHttpReq.send( null );
171 How do you convert date to another timezone in javascript - event.toLocaleString('en-GB', { timeZone: 'UTC' })
172 What are the properties used to get size of window - var width = window.innerWidth
|| document.documentElement.clientWidth
|| document.body.clientWidth;
173 What is a conditional operator in javascript - only JavaScript operator that takes three operands which acts as a shortcut for if statements.
174 Can you apply chaining on conditional operator - yes
175 What are the ways to execute javascript after page load - window.onload,document.onload , body onload
176 What is the difference between proto and prototype - The __proto__ object is the actual object that is used in the lookup chain to resolve methods, etc. Whereas prototype is the object that is used to build __proto__ when you create an object with new
177 Give an example where do you really need semicolon - IIFE after a function
178 What is a freeze method - does not allow adding new properties to an object,prevents from removing and prevents changing the enumerability, configurability, or writability of existing
properties.
179 What is the purpose of freeze method - freezing objects and arrays, make object immutable
180 Why do I need to use freeze method
181 How do you detect a browser language preference - navigator.language
182 How to convert string to title case with javascript
183 How do you detect javascript disabled in the page - code block inside <noscript> gets executed when JavaScript is disabled, and is typically used to display alternative content when the page generated in JavaScript.
184 What are various operators supported by javascript - arthematic, logical, comparision,assignment, ternary, typeof
185 What is a rest parameter - is an improved way to handle function parameters which allows us to represent an indefinite number of arguments as an array.
186 What happens if you do not use rest parameter as a last argument -  throw an error
187 What are the bitwise operators available in javascript - &, |, ~, ^, <<, >>, >>>
188 What is a spread operator - allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements
189 How do you determine whether object is frozen or not - Object.isFrozen()
190 How do you determine two values same or not using object - Object.is()
191 What is the purpose of using object is method
192 How do you copy properties from one object to other - Object.assign()
193 What are the applications of assign method
194 What is a proxy object - used to define custom behavior for fundamental operations such as property lookup, assignment, enumeration, function invocation, etc.
195 What is the purpose of seal method - used to seal an object, by preventing new properties from being added to it and marking all existing properties as non-configurable.
196 What are the applications of seal method
197 What are the differences between freeze and seal methods
198 How do you determine if an object is sealed or not - Object.isSealed()
199 How do you get enumerable key and value pairs - Object.entries()
200 What is the main difference between Object.values and Object.entries method
201 How can you get the list of keys of any object - Object.keys()
202 How do you create an object with prototype - Object.create() method is used to create a new object with the specified prototype object and properties.
203 What is a WeakSet - used to store a collection of weakly(weak references) held objects.
204 What are the differences between WeakSet and Set
205 List down the collection of methods available on WeakSet - add(),delete(),has(),length()
206 What is a WeakMap - collection of key/value pairs in which the keys are weakly referenced.
207 What are the differences between WeakMap and Map
208 List down the collection of methods available on WeakMap - set(),delete(),has(),get()
209 What is the purpose of uneval - used to create a string representation of the source code of an Object.
210 How do you encode an URL - encodeURI()
211 How do you decode an URL - decodeURI()
212 How do you print the contents of web page - window.print()
213 What is the difference between uneval and eval
214 What is an anonymous function - function without a name! Anonymous functions are commonly assigned to a variable name or used as a callback function.
215 What is the precedence order between local and global variables - local > global
216 What are javascript accessors - Getters uses the get keyword whereas Setters uses the set keyword.
217 How do you define property on Object constructor - Object.defineProperty()
218 What is the difference between get and defineProperty
219 What are the advantages of Getters and Setters
220 Can I add getters and setters using defineProperty method - yes
221 What is the purpose of switch-case - used for decision making purposes
222 What are the conventions to be followed for the usage of swtich case
223 What are primitive data types
224 What are the different ways to access object properties - dot notation, bracket notation, expression notation
225 What are the function parameter rules
226 What is an error object - built in error object that provides error information when an error occurs. It has two properties: name and message.
227 When you get a syntax error - A SyntaxError is thrown if you try to evaluate code with a syntax error.
228 What are the different error names from error object - EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError
229 What are the various statements in error handling - try, catch, thrown, finally 
230 What are the two types of loops in javascript - Entry Controlled and Exit control
231 What is nodejs - server-side platform built on Chrome's JavaScript runtime for easily building fast and scalable network applications.
232 What is an Intl object - namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting.
233 How do you perform language specific date and time formatting - Intl.DateTimeFormat
234 What is an Iterator - an object which defines a sequence and a return value upon its termination.
235 How does synchronous iteration works - Iterable, Iterator, IteratorResult
236 What is an event loop - is a queue of callback functions. When an async function executes, the callback function is pushed into the queue.
237 What is call stack - data structure for javascript interpreters to keep track of function calls in the program.
238 What is an event queue
239 What is a decorator - is an expression that evaluates to a function and that takes the target, name, and decorator descriptor as arguments.
240 What are the properties of Intl object - collator, DateTimeFormat, ListFormat, NumberFormat, PluralRules, RelativeTimeFormat
241 What is an Unary operator - used to convert a variable to a number
242 How do you sort elements in an array - arr.sort();
243 What is the purpose of compareFunction while sorting arrays - used to define the sort order. If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value.
244 How do you reversing an array - arr.reverse();
245 How do you find min and max value in an array - Math.min.apply(null, arr);
246 How do you find min and max values without Math functions
247 What is an empty statement and purpose of it - The empty statement is a semicolon (;) indicating that no statement will be executed, even if JavaScript syntax requires one.
248 How do you get meta data of a module - import.meta object which is a meta-property exposing context-specific meta data to a JavaScript module. It contains information about the current module,
249 What is a comma operator - used to evaluate each of its operands from left to right and returns the value of the last operand.
250 What is the advantage of a comma operator - used to include multiple expressions in a location that requires a single expression.
251 What is typescript - is a typed superset of JavaScript created by Microsoft that adds optional types, classes, async/await, and many other features, and compiles to plain JavaScript.
252 What are the differences between javascript and typescript
253 What are the advantages of typescript over javascript
254 What is an object initializer - expression that describes the initialization of an Object. The syntax for this expression is represented as a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). This is also known as literal notation.
255 What is a constructor method - special method for creating and initializing an object created within a class. If you do not specify a constructor method, a default constructor is used.
256 What happens if you write constructor more than once in a class - SyntaxError error.
257 How do you call the constructor of a parent class - using super keyword
258 How do you get the prototype of an object - Object.getPrototypeOf(obj)
259 What happens If I pass string type for getPrototype method - Typeerror (ES5) but String.prototype (ES6)
260 How do you set prototype of one object to another - Object.setPrototypeOf() method that sets the prototype (i.e., the internal Prototype property) of a specified object to another object or null.
261 How do you check whether an object can be extendable or not - Object.isExtensible()
262 How do you prevent an object to extend - Object.preventExtensions()
263 What are the different ways to make an object non-extensible - Object.preventExtensions, Object.seal, Object.freeze
264 How do you define multiple properties on an object - Object.defineProperties()
265 What is MEAN in javascript - most popular open-source JavaScript software tech stack available for building dynamic web apps where you can write both the server-side and client-side halves of the web project entirely in JavaScript.
266 What Is Obfuscation in javascript - deliberate act of creating obfuscated javascript code(i.e, source or machine code) that is difficult for humans to understand. It is something similar to encryption, but a machine can understand the code and execute it.
267 Why do you need Obfuscation - reduce size, hide business logic, reverse engineering difficult, reduced download time
268 What is Minification - process of removing all unnecessary characters(empty spaces are removed) and variables will be renamed without changing it's functionality.
269 What are the advantages of minification - Decreases loading times, Saves bandwidth usages
270 What are the differences between Obfuscation and Encryption
271 What are the common tools used for minification - Google's Closure Compiler, UglifyJS2, jsmin, javascript-minifier.com/, prettydiff.com
272 How do you perform form validation using javascript
273 How do you perform form validation without javascript - using attribute like required
274 What are the DOM methods available for constraint validation - checkValidity(), setCustomValidity()
275 What are the available constraint validation DOM properties - validity, validationMessage, willValidate:
276 What are the list of validity properties - customError:, patternMismatch:, rangeOverflow:, rangeUnderflow:, stepMismatch:, tooLong:, typeMismatch:, valueMissing:, valid:
277 Give an example usage of rangeOverflow property - If an element's value is greater than its max attribute then rangeOverflow property returns true.
278 Is enums feature available in javascript - No
279 What is an enum - is a type restricting variables to one value from a predefined set of constants
280 How do you list all properties of an object - Object.getOwnPropertyNames()
281 How do you get property descriptors of an object - Object.getOwnPropertyDescriptors()
282 What are the attributes provided by a property descriptor - writable, configurable, enumerable, value, get, set
283 How do you extend classes - extends keyword
284 How do I modify the url without reloading the page - history.pushState() and history.replaceState()
285 How do you check whether an array includes a particular value or not - arr.includes()
286 How do you compare scalar arrays - use length and every method
287 How to get the value from get parameters - The new URL() object accepts the url string and searchParams property of this object can be used to access the get parameters.
288 How do you print numbers with commas as thousand separators - num.toLocaleString();
289 What is the difference between java and javascript
290 Does javascript supports namespace - doesn’t support
291 How do you declare namespace- Using Object Literal notation, using IIFE, using block and a let/const declaration
292 How do you invoke javascript code in an iframe from parent page - document.getElementBy or window.frames .After that contentWindow property of iFrame gives the access for targetFunction
293 How do get the timezone offset from date - getTimezoneOffset method of the date object.
294 How do you load CSS and JS files dynamically
295 What are the different methods to find HTML elements in DOM - document.getElementById(id), document.getElementsByTagName(name), document.getElementsByClassName(name):
296 What is jQuery - cross-browser JavaScript library that provides Document Object Model (DOM) traversal, event handling, animations and AJAX interactions by minimizing the discrepancies across browsers.
297 What is V8 JavaScript engine - open source high-performance JavaScript engine used by the Google Chrome browser, written in C++.
298 Why do we call javascript as dynamic language - variables in JavaScript are not
directly associated with any particular value type, and any variable can be assigned/reassigned with values of all types.
299 What is a void operator - evaluates the given expression and then returns undefined(i.e, without returning value)
300 How to set the cursor to wait - window.document.body.style.cursor = "wait";
301 How do you create an infinite loop - for (;;) {}, while(true) {}
302 Why do you need to avoid with statement - with statement was intended to provide a shorthand for writing recurring accesses to objects.
303 What is the output of below for loops
for (var i = 0; i < 4; i++) { // global scope
setTimeout(() => console.log(i));
}
for (let i = 0; i < 4; i++) { // block scope
setTimeout(() => console.log(i));
}
304 List down some of the features of ES6 - Rest and spread parameters, arrow functions, template literals, destructuring assignment, promises, default parameter etc
305 What is ES6 - sixth edition of the javascript language and it was released in June 2015
306 Can I redeclare let and const variables - Uncaught SyntaxError
307 Is const variable makes the value immutable - No
308 What are default parameters - allows parameters to be initialized with
default values if no value or undefined is passed.
309 What are template literals - Template literals or template strings are string literals allowing embedded expressions.
310 How do you write multi-line strings in template literals - ``, \n
311 What are nesting templates - allow inner backticks inside a placeholder ${ } within the template.
312 What are tagged templates - advanced form of templates in which tags allow you to parse template literals with a function. The tag function accepts the first parameter as an array of strings and remaining parameters as expressions.
313 What are raw strings - used to get the rawstring form of template strings., allows you to access the raw strings as they were entered, without processing escape sequences.
314 What is destructuring assignment - makes it possible to unpack values from arrays or properties from objects into distinct variables.
315 What are default values in destructuring assignment - A variable can be assigned a default value when the value unpacked from the array or object is undefined during destructuring assignment.
316 How do you swap variables in destructuring assignment - [x, y] = [y, x];
317 What are enhanced object literals - make it easy to quickly create objects with properties inside the curly braces.
318 What are dynamic imports - allows us to load modules on demand by using promises or the async/await syntax.
319 What are the use cases for dynamic imports - 
320 What are typed arrays - array-like objects from ECMAScript 6 API for handling binary data.
321 What are the advantages of module loaders - dynamic loading, state isolation, Global namespace isolation, compilation hooks, nested viszualization
322 What is collation - used for sorting a set of strings and searching within a set of strings. It is parameterized by locale and aware of Unicode
323 What is for...of statement - loop iterating over iterable objects or elements
324 What is the output of below spread operator array [...'John Resig'] - ['J', 'o', 'h', 'n', '', 'R', 'e', 's', 'i', 'g']
325 Is PostMessage secure - Yes, as long as the programmer/developer is careful
about checking the origin and source of an arriving message.
326 What are the problems with postmessage target origin as wildcard - The second argument of postMessage method specifies which origin is allowed to receive the message. If you use the wildcard “*” as an argument then any origin is allowed to receive the message.
327 How do you avoid receiving postMessages from attackers - by validating the origin of the
message on the receiver's end using the “message.origin” attribute
328 Can I avoid using postMessages completely - N0, a lot of third party scripts use postMessage to communicate with the third party service.
329 Is postMessages synchronous - No, only in IE8
330 What paradigm is Javascript - multi-paradigm language, supporting imperative/procedural programming, Object-Oriented Programming and functional programming.
331 What is the difference between internal and external javascript - 
332 Is JavaScript faster than server side script - yes
333 How do you get the status of a checkbox - checked property on the selected checkbox
334 What is the purpose of double tilde operator (double NOT bitwise operator)- substitute for Math.floor().
335 How do you convert character to ASCII code - str.charCodeAt(index), for vice versa String.fromCharCode(ASCII code);
336 What is ArrayBuffer - represent a generic, fixed-length raw binary data buffer.To manipulate an ArrayBuffer, we need to use a Dataview
337 What is the output of below string expression console.log("Welcome to JS world"[0]) - “W”
338 What is the purpose of Error object - The Error constructor creates an error object and the instances of error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-definedexceptions.
339 What is the purpose of EvalError object - indicates an error regarding the global eval() function.
340 What are the list of cases error thrown from non-strict mode to strict mode
341 Do all objects have prototypes - No. All objects have prototypes except for the base object which is created by the user, or an object that is created using the new keyword.
342 What is the difference between a parameter and an argument - 
343 What is the purpose of some method in arrays - used to test whether at least one element in the array passes the test implemented by the provided function.
344 How do you combine two or more arrays - array1.concat(array2, array3, ..., arrayX)
345 What is the difference between Shallow and Deep copy - 
346 How do you create specific number of copies of a string - 'Hello'.repeat(4);
347 How do you return all matching strings against a regular expression - matchAll()
348 How do you trim a string at the beginning or ending - trim(), trimStart(), trimLeft(), trimEnd(), trimRight()
349 What is the output of below console statement with unary operator console.log(+ 'Hello'); - NAN
350 Does javascript uses mixins
351 What is a thunk function - function which delays the evaluation of the value.
352 What are asynchronous thunks - useful to make network requests.
353 What is the output of below function calls - 40,NAN
const circle = {
radius: 20,
diameter() {
return this.radius * 2;
},
perimeter: () => 2 * Math.PI * this.radius
};
console.log(circle.diameter()); console.log(circle.perimeter());
354 How to remove all line breaks from a string - message.replace( /[\r\n]+/gm, "" );
355 What is the difference between reflow and repaint
356 What happens with negating an array - console.log(![]); // false
357 What happens if we add two arrays - it will convert them both to strings and concatenate them
358 What is the output of prepend additive operator on falsy values
359 How do you create self string using special characters - ![] + [] === "false",  +!+[] === 1
360 How do you remove falsy values from an array - myArray.filter(Boolean);
361 How do you get unique values of an array - console.log([...new Set([1, 2, 4, 4, 3])]);
362 What is destructuring aliases - Sometimes you would like to have a destructured variable with a different name than the property name. const obj = { x: 1 }; const { x: otherName } = obj;
363 How do you map the array values without using map method -  from()
364 How do you empty an array - arr.length = 0;
365 How do you rounding numbers to certain decimals -toFixed()
366 What is the easiest way to convert an array to an object- var obj = {...arr};
367 How do you create an array with some data - var newArray = new Array(5).fill("0");
368 What are the placeholders from console object - %o, %s, %d
369 Is it possible to add CSS to console messages - yes
370 What is the purpose of dir method of console object - display an interactive list of the properties of the specified JavaScript object as JSON.
371 Is it possible to debug HTML elements in console - yes, getElementByTagName()
372 How do you display data in a tabular format using console object - console.table()
373 How do you verify that an argument is a Number or not - !isNaN(parseFloat(n)) && isFinite(n)
374 How do you create copy to clipboard button
document.querySelector("#copy-button").onclick = function() {
// Select the content
document.querySelector("#copy-input").select();
// Copy to the clipboard
document.execCommand('copy');
};
375 What is the shortcut to get timestamp - console.log(+new Date()); console.log(Date.now()); console.log(new Date().getTime());
376 How do you flattening multi dimensional arrays - const flattenArr = [].concat(...biDimensionalArr);
377 What is the easiest multi condition checking
if (['first', 1, 'second', 2].indexOf(input) !== -1) {
someFunction();
}
378 How do you capture browser back button - window.onbeforeunload method is used to capture browser back button events.
379 How do you disable right click in the web page - <body oncontextmenu="return false;">
380 What are wrapper objects - Primitive Values like string,number and boolean don't have properties and methods but they are temporarily converted or coerced to an object(Wrapper object) when you try to perform actions on them.
381 What is AJAX - used to display data
asynchronously. i.e. We can send data to the server and get data from the server without reloading the web page.
382 What are the different ways to deal with Asynchronous Code - i. Callbacks, Promises, Async/await, Third-party libraries such as async.js,bluebird etc
383 How to cancel a fetch request - const controller = new AbortController(); setTimeout(() => controller.abort(), 2000); 
384 What is web speech API - used to enable modern browsers recognize and synthesize speech(i.e, voice data into web apps). It has two parts - SpeechRecognition (Asynchronous Speech Recognition or Speech-to-Text): and SpeechSynthesis (Text-to-Speech):
385 What is minimum timeout throttling - 4ms.
386 How do you implement zero timeout in modern browsers - window.postMessage()
387 What are tasks in event loop - A task is any javascript code/program which is scheduled to be run by the standard mechanisms such as initially starting to run a program, run an event callback, or an interval or timeout being fired. All these tasks are scheduled on a task queue.
388 What are microtasks - javascript code which needs to be executed immediately after the currently executing task/microtask is completed. They are kind of blocking in nature.
389 What are different event loops - 
390 What is the purpose of queueMicrotask
391 How do you use javascript libraries in typescript file - using declare keyword
392 What are the differences between promises and observables - 
393 What is heap - memory location where objects are stored when we define variables.
394 What is an event table - The main purpose of the event table is to keep track of
events and send them to the Event Queue
395 What is a microTask queue - the new queue where all the tasks initiated by promise objects get processed before the callback queue.
396 What is the difference between shim and polyfill - A shim is a library that brings a new API to an older environment, using only the means of that environment. It isn't necessarily restricted to a web application.A polyfill is a shim for a browser API.
397 How do you detect primitive or non primitive value type - Object(val) !== val
398 What is babel - JavaScript transpiler to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments.
399 Is Node.js completely single threaded - Node is a single thread, but some of the functions included in the Node.js standard library(e.g, fsmodule functions) are not single threaded.
400 What are the common use cases of observables - web sockets with push notifications, user
input changes, repeating intervals, etc
401 What is RxJS  - library for implementing reactive programming using observables that makes it easier to compose asynchronous or callback-based code.
402 What is the difference between Function constructor and function declaration
403 What is a Short circuit condition - meant for condensed way of writing simple if statements.
404 What is the easiest way to resize an array - The length property of an array is useful to resize or empty an array quickly.
405 What is an observable - An Observable is basically a function that can return a stream of values either synchronously or asynchronously to an observer over time.
406 What is the difference between function and class declarations - function declarations are hoisted but not class declarations.
407 What is an async function - function declared with the async keyword which enables asynchronous, promise-based behavior to be written in a cleaner style by avoiding promise chains.
408 How do you prevent promises swallowing errors - Add catch block at the end of each chain, Add done method, Extend ES6 Promises by Bluebird
409 What is deno - simple, modern and secure runtime for JavaScript and TypeScript that uses V8 JavaScript engine and the Rust programming language.
410 How do you make an object iterable in javascript - defining a Symbol.iterator property on it.
411 What is a Proper Tail Call - A tail call is a subroutine or function call performed as the final action of a calling function. Whereas Proper tail call(PTC) is a technique where the program or code will not create additional stack frames for a recursion when the function call is a tail call.
412 How do you check an object is a promise or not
function isPromise(object){
if(Promise && Promise.resolve){
return Promise.resolve(object) == object;
}else{
throw "Promise not supported in your environment"
}
}
413 How to detect if a function is called as constructor
function Myfunc() {
if (new.target) {
console.log('called with new');
} else {
console.log('not called with new');
}
}
414 What are the differences between arguments object and rest parameter
415 What are the differences between spread operator and rest parameter - Rest parameter collects all remaining elements into an array. Whereas Spread operator allows
iterables( arrays / objects / strings ) to be expanded into single arguments/elements.
416 What are the different kinds of generators - Generator function declaration:, Generator function expressions:, Generator method definitions in object literals:, Generator method definitions in class:, Generator as a computed property:
417 What are the built-in iterables - Arrays, TypedArrays, Maps, Sets, arguments, 
418 What are the differences between for...of and for...in statements
419 How do you define instance and non-instance properties - Instance properties must be defined inside of class methods. But Static(class) and prototype data properties must be defined outside of the ClassBody declaration.
420 What is the difference between isNaN and Number.isNaN?
421 How to invoke an IIFE without any extra brackets?
422 Is that possible to use expressions in switch cases? - yes
423 What is the easiest way to ignore promise errors?
424 How do style the console output using CSS?

